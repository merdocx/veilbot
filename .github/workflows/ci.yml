name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: List project structure
        run: |
          echo "üìÅ Project structure:"
          ls -la
          echo ""
          echo "üìÅ Python files:"
          find . -name "*.py" -type f | head -10
          echo ""
          echo "üìÅ Directories:"
          find . -type d -maxdepth 2 | sort
      
      - name: Run comprehensive tests
        run: |
          echo "üß™ Running comprehensive tests..."
          python run_tests.py
      
      - name: Test configuration validation
        run: |
          echo "üîß Testing configuration..."
          python -c "
          import os
          os.environ['TELEGRAM_BOT_TOKEN'] = '123456789:KhO-lzCMPJqZF8CD07t-RSEgZJol2i7_yez'
          os.environ['YOOKASSA_SHOP_ID'] = '123456'
          os.environ['YOOKASSA_API_KEY'] = 'test_1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
          os.environ['YOOKASSA_RETURN_URL'] = 'https://example.com'
          os.environ['ADMIN_ID'] = '123456789'
          
          from config import validate_configuration
          result = validate_configuration()
          print(f'Configuration validation: {result}')
          assert result['is_valid'], 'Configuration validation failed'
          print('‚úÖ Configuration validation passed')
          "
      
      - name: Test imports without environment
        run: |
          echo "üì¶ Testing module imports..."
          python -c "
          # Test basic imports that don't require environment variables
          from config import PROTOCOLS
          from db import init_db
          from validators import input_validator, db_validator, business_validator
          from vpn_protocols import ProtocolFactory
          from utils import get_db_cursor
          print('‚úÖ All basic imports successful')
          "
      
      - name: Check code quality
        run: |
          echo "üîç Checking code quality..."
          # Check for syntax errors
          python -m py_compile bot.py
          python -m py_compile config.py
          python -m py_compile db.py
          python -m py_compile payment.py
          python -m py_compile validators.py
          python -m py_compile vpn_protocols.py
          python -m py_compile utils.py
          echo "‚úÖ No syntax errors found"
      
      - name: Test project structure
        run: |
          echo "üìã Testing project structure..."
          # Check required files
          required_files=('bot.py', 'config.py', 'db.py', 'payment.py', 'requirements.txt', '.env.example')
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          # Check required directories
          required_dirs=('admin', 'docs', 'scripts', 'setup')
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ $dir exists"
            else
              echo "‚ùå $dir missing"
              exit 1
            fi
          done
          echo "‚úÖ Project structure is correct"
      
      - name: Test requirements
        run: |
          echo "üìã Testing requirements.txt..."
          if [ -f requirements.txt ]; then
            echo "‚úÖ requirements.txt exists"
            echo "üì¶ Dependencies:"
            cat requirements.txt
          else
            echo "‚ùå requirements.txt missing"
            exit 1
          fi
