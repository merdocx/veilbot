name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: List project structure
        run: |
          echo "üìÅ Project structure:"
          ls -la
          echo ""
          echo "üìÅ Python files:"
          find . -name "*.py" -type f | head -10
          echo ""
          echo "üìÅ Directories:"
          find . -type d -maxdepth 2 | sort
      
      - name: Run comprehensive tests
        run: |
          echo "üß™ Running comprehensive tests..."
          python run_tests.py
      
      - name: Test configuration validation
        run: |
          echo "üîß Testing configuration..."
          python -c "
          import os
          os.environ['TELEGRAM_BOT_TOKEN'] = '123456789:KhO-lzCMPJqZF8CD07t-RSEgZJol2i7_yez'
          os.environ['YOOKASSA_SHOP_ID'] = '123456'
          os.environ['YOOKASSA_API_KEY'] = 'test_1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
          os.environ['YOOKASSA_RETURN_URL'] = 'https://example.com'
          os.environ['ADMIN_ID'] = '123456789'
          
          from config import validate_configuration
          result = validate_configuration()
          print(f'Configuration validation: {result}')
          assert result['is_valid'], 'Configuration validation failed'
          print('‚úÖ Configuration validation passed')
          "
      
      - name: Test imports without environment
        run: |
          echo "üì¶ Testing module imports..."
          python -c "
          # Test basic imports that don't require environment variables
          from config import PROTOCOLS
          from db import init_db
          from validators import input_validator, db_validator, business_validator
          from vpn_protocols import ProtocolFactory
          from utils import get_db_cursor
          print('‚úÖ All basic imports successful')
          "
      
      - name: Test new module imports
        run: |
          echo "üì¶ Testing new module imports..."
          echo "üîç Current directory: $(pwd)"
          echo "üîç Python version: $(python --version)"
          echo "üîç Python path: $(python -c 'import sys; print(sys.path[:3])')"
          
          python -c "
          import os
          import sys
          
          print('üîç Checking project structure...')
          print(f'Current directory: {os.getcwd()}')
          
          # Check required files
          required_files = ['bot.py', 'config.py', 'db.py', 'requirements.txt', '.env.example']
          for file in required_files:
              if os.path.exists(file):
                  print(f'‚úÖ {file} exists')
              else:
                  print(f'‚ùå {file} missing')
          
          # Check directories
          required_dirs = ['admin', 'docs', 'scripts', 'setup', 'payments']
          for dir in required_dirs:
              if os.path.exists(dir):
                  print(f'‚úÖ {dir}/ exists')
              else:
                  print(f'‚ùå {dir}/ missing')
          
          print('üîç Testing imports...')
          
          # Test new modules that don't require environment variables
          try:
              import payments
              print('‚úÖ payments module imported')
          except Exception as e:
              print(f'‚ùå payments import failed: {e}')
              import traceback
              traceback.print_exc()
          
          try:
              from memory_optimizer import MemoryOptimizer, get_memory_stats
              print('‚úÖ memory_optimizer imported')
          except Exception as e:
              print(f'‚ùå memory_optimizer import failed: {e}')
              import traceback
              traceback.print_exc()
          
          try:
              from security_logger import SecurityLogger, security_logger
              print('‚úÖ security_logger imported')
          except Exception as e:
              print(f'‚ùå security_logger import failed: {e}')
              import traceback
              traceback.print_exc()
          
          print('‚úÖ All new module imports successful')
          "
      
      - name: Check code quality
        run: |
          echo "üîç Checking code quality..."
          # Check for syntax errors
          python -m py_compile bot.py
          python -m py_compile config.py
          python -m py_compile db.py
          python -m py_compile validators.py
          python -m py_compile vpn_protocols.py
          python -m py_compile utils.py
          echo "‚úÖ No syntax errors found"
      
      - name: Test payments module
        run: |
          echo "üí≥ Testing payments module..."
          python -m py_compile payments/__init__.py
          python -m py_compile payments/config.py
          python -m py_compile payments/adapters/legacy_adapter.py
          echo "‚úÖ Payments module syntax OK"
      
      - name: Test new modules
        run: |
          echo "üîß Testing new modules..."
          python -m py_compile memory_optimizer.py
          python -m py_compile security_logger.py
          python -m py_compile test_memory_optimization.py
          python -m py_compile test_memory_performance.py
          python -m py_compile test_security_logger.py
          echo "‚úÖ New modules syntax OK"
      
      - name: Test project structure
        run: |
          echo "üìã Testing project structure..."
          # Check required files
          required_files=('bot.py', 'config.py', 'db.py', 'requirements.txt', '.env.example')
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          # Check payments module
          if [ -d "payments" ]; then
            echo "‚úÖ payments/ directory exists"
          else
            echo "‚ùå payments/ directory missing"
            exit 1
          fi
          
          if [ -f "payments/__init__.py" ]; then
            echo "‚úÖ payments/__init__.py exists"
          else
            echo "‚ùå payments/__init__.py missing"
            exit 1
          fi
          
          # Check required directories (some may be empty after cleanup)
          required_dirs=('admin', 'docs')
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ $dir exists"
            else
              echo "‚ùå $dir missing"
              exit 1
            fi
          done
          
          # Check optional directories (may be empty after cleanup)
          optional_dirs=('scripts', 'setup')
          for dir in "${optional_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ $dir exists (may be empty)"
            else
              echo "‚ö†Ô∏è $dir missing (optional after cleanup)"
            fi
          done
          echo "‚úÖ Project structure is correct"
      
      - name: Test requirements
        run: |
          echo "üìã Testing requirements.txt..."
          if [ -f requirements.txt ]; then
            echo "‚úÖ requirements.txt exists"
            echo "üì¶ Dependencies:"
            cat requirements.txt
          else
            echo "‚ùå requirements.txt missing"
            exit 1
          fi
