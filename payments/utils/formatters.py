from typing import Optional
from datetime import datetime
from ..models.payment import Payment, PaymentStatus


class PaymentFormatters:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    
    @staticmethod
    def format_payment_message(
        payment: Payment,
        tariff_name: str,
        protocol_name: str,
        payment_url: Optional[str] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        
        Args:
            payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
            tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            protocol_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            payment_url: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        amount_rub = payment.amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        
        message = f"üí≥ *–ü–ª–∞—Ç–µ–∂ {protocol_name.upper()}*\n\n"
        message += f"üì¶ –¢–∞—Ä–∏—Ñ: *{tariff_name}*\n"
        message += f"üí∞ –°—É–º–º–∞: *{amount_rub:.2f}‚ÇΩ*\n"
        
        if payment.email:
            message += f"üìß Email: `{payment.email}`\n"
        
        if payment.country:
            message += f"üåç –°—Ç—Ä–∞–Ω–∞: *{payment.country}*\n"
        
        message += f"üìä –°—Ç–∞—Ç—É—Å: *{PaymentFormatters.format_payment_status(payment.status)}*\n"
        message += f"üÜî ID: `{payment.payment_id}`\n"
        
        if payment.created_at:
            message += f"üìÖ –°–æ–∑–¥–∞–Ω: *{payment.created_at.strftime('%d.%m.%Y %H:%M')}*\n"
        
        if payment_url:
            message += f"\nüîó [–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({payment_url})"
        
        return message
    
    @staticmethod
    def format_payment_status(status: PaymentStatus) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        """
        status_map = {
            PaymentStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            PaymentStatus.PAID: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
            PaymentStatus.FAILED: "‚ùå –ù–µ—É–¥–∞—á–µ–Ω",
            PaymentStatus.CANCELLED: "üö´ –û—Ç–º–µ–Ω–µ–Ω",
            PaymentStatus.REFUNDED: "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω",
            PaymentStatus.EXPIRED: "‚è∞ –ò—Å—Ç–µ–∫"
        }
        
        return status_map.get(status, str(status.value))
    
    @staticmethod
    def format_amount(amount: int, currency: str = "RUB") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
        
        Args:
            amount: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            currency: –í–∞–ª—é—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        """
        if currency == "RUB":
            rubles = amount / 100
            return f"{rubles:.2f}‚ÇΩ"
        elif currency == "USD":
            dollars = amount / 100
            return f"${dollars:.2f}"
        elif currency == "EUR":
            euros = amount / 100
            return f"‚Ç¨{euros:.2f}"
        else:
            return f"{amount} {currency}"
    
    @staticmethod
    def format_payment_receipt(payment: Payment, tariff_name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
            tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫
        """
        amount_rub = payment.amount / 100
        
        receipt = f"üßæ *–ß–µ–∫ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
        receipt += f"üì¶ –¢–æ–≤–∞—Ä: {tariff_name}\n"
        receipt += f"üí∞ –°—É–º–º–∞: {PaymentFormatters.format_amount(payment.amount)}\n"
        receipt += f"üìÖ –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        receipt += f"üÜî –ù–æ–º–µ—Ä: {payment.payment_id}\n"
        
        if payment.email:
            receipt += f"üìß Email: {payment.email}\n"
        
        receipt += f"üìä –°—Ç–∞—Ç—É—Å: {PaymentFormatters.format_payment_status(payment.status)}"
        
        return receipt
    
    @staticmethod
    def format_payment_history(payments: list, page: int = 1, total_pages: int = 1) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        
        Args:
            payments: –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
        """
        if not payments:
            return "üìã *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π"
        
        history = f"üìã *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π* (—Å—Ç—Ä. {page}/{total_pages})\n\n"
        
        for i, payment in enumerate(payments, 1):
            amount_rub = payment.amount / 100
            status_emoji = "‚úÖ" if payment.is_paid() else "‚è≥" if payment.is_pending() else "‚ùå"
            
            history += f"{i}. {status_emoji} {amount_rub:.2f}‚ÇΩ - {PaymentFormatters.format_payment_status(payment.status)}\n"
            history += f"   üìÖ {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            history += f"   üÜî `{payment.payment_id[:8]}...`\n\n"
        
        return history
    
    @staticmethod
    def format_payment_statistics(stats: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        
        Args:
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        total_amount = stats.get('total_amount', 0) / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
        
        statistics = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π* (–∑–∞ {stats.get('period_days', 30)} –¥–Ω–µ–π)\n\n"
        statistics += f"üìà –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: *{stats.get('total_payments', 0)}*\n"
        statistics += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: *{stats.get('paid_payments', 0)}*\n"
        statistics += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: *{stats.get('pending_payments', 0)}*\n"
        statistics += f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: *{stats.get('failed_payments', 0)}*\n"
        statistics += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: *{total_amount:.2f}‚ÇΩ*\n"
        statistics += f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: *{stats.get('success_rate', 0):.1f}%*"
        
        return statistics
    
    @staticmethod
    def format_error_message(error: str, payment_id: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        message = "‚ùå *–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
        message += f"üîç –û–ø–∏—Å–∞–Ω–∏–µ: {error}\n"
        
        if payment_id:
            message += f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n"
        
        message += "\nüí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è."
        
        return message
    
    @staticmethod
    def format_success_message(payment: Payment, tariff_name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        
        Args:
            payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
            tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        """
        amount_rub = payment.amount / 100
        
        message = f"üéâ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
        message += f"üì¶ –¢–∞—Ä–∏—Ñ: *{tariff_name}*\n"
        message += f"üí∞ –°—É–º–º–∞: *{amount_rub:.2f}‚ÇΩ*\n"
        message += f"üÜî ID: `{payment.payment_id}`\n"
        message += f"üìÖ –î–∞—Ç–∞: *{payment.paid_at.strftime('%d.%m.%Y %H:%M')}*\n\n"
        message += "üîë –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á!"
        
        return message
    
    @staticmethod
    def format_payment_method(method: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        
        Args:
            method: –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        """
        method_map = {
            "card": "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
            "sbp": "üì± –°–ë–ü",
            "wallet": "üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫",
            "bank_transfer": "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
        }
        
        return method_map.get(method, method)
    
    @staticmethod
    def format_currency(currency: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        
        Args:
            currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
        """
        currency_map = {
            "RUB": "üá∑üá∫ –†—É–±–ª–∏ (‚ÇΩ)",
            "USD": "üá∫üá∏ –î–æ–ª–ª–∞—Ä—ã ($)",
            "EUR": "üá™üá∫ –ï–≤—Ä–æ (‚Ç¨)"
        }
        
        return currency_map.get(currency, currency)
    
    @staticmethod
    def format_timestamp(timestamp: datetime) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        
        Args:
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        now = datetime.utcnow()
        diff = now - timestamp
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "–¢–æ–ª—å–∫–æ —á—Ç–æ"
