import asyncio
import time
import sqlite3
import re
import logging
from datetime import datetime
from app.logging_config import setup_logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_BOT_TOKEN, PROTOCOLS, validate_configuration, ADMIN_ID
from db import init_db
from outline import create_key, delete_key
from utils import get_db_cursor
from vpn_protocols import format_duration, ProtocolFactory, get_protocol_instructions

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
from memory_optimizer import (
    get_payment_service, get_vpn_service, get_security_logger,
    optimize_memory, get_memory_stats, log_memory_usage
)

# –õ–µ–Ω–∏–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥—É–ª–µ–π
PAYMENT_MODULE_AVAILABLE = None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
VPN_PROTOCOLS_AVAILABLE = None   # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
SECURITY_LOGGER_AVAILABLE = None # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–ª–µ–≥–∫–∏–µ –º–æ–¥—É–ª–∏)
from validators import input_validator, db_validator, business_validator, validate_user_input, sanitize_user_input, ValidationError

# Security configuration
SECURITY_HEADERS = {
    "X-Content-Type-Options": "nosniff",
    "X-Frame-Options": "DENY",
    "X-XSS-Protection": "1; mode=block",
    "Referrer-Policy": "strict-origin-when-cross-origin"
}

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in config.py")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
config_validation = validate_configuration()
if not config_validation['is_valid']:
    for err in config_validation['errors']:
        logging.error(f"Config error: {err}")
    raise RuntimeError("Invalid configuration. Check environment variables.")
for warn in config_validation['warnings']:
    logging.warning(f"Config warning: {warn}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ lazy loading
logging.info("üöÄ VeilBot –∑–∞–ø—É—â–µ–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏")

# Simple state management for email collection
user_states = {}  # user_id -> {"state": ..., ...}

# Notification state for key availability
low_key_notified = False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"))
main_menu.add(KeyboardButton("–ú–æ–∏ –∫–ª—é—á–∏"))
main_menu.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ"))
main_menu.add(KeyboardButton("–ü–æ–º–æ—â—å"))

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
def get_protocol_selection_menu() -> ReplyKeyboardMarkup:
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton(f"{PROTOCOLS['outline']['icon']} {PROTOCOLS['outline']['name']}"))
    menu.add(KeyboardButton(f"{PROTOCOLS['v2ray']['icon']} {PROTOCOLS['v2ray']['name']}"))
    menu.add(KeyboardButton("‚ÑπÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ã"))
    menu.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return menu

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏
help_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
help_keyboard.add(KeyboardButton("–ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á"))
help_keyboard.add(KeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"))
help_keyboard.add(KeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É"))
help_keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

def get_tariff_menu(paid_only: bool = False) -> ReplyKeyboardMarkup:
    with get_db_cursor() as cursor:
        if paid_only:
            cursor.execute("SELECT id, name, price_rub, duration_sec FROM tariffs WHERE price_rub > 0 ORDER BY price_rub ASC")
        else:
            cursor.execute("SELECT id, name, price_rub, duration_sec FROM tariffs ORDER BY price_rub ASC")
        tariffs = cursor.fetchall()

    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    for _, name, price, duration in tariffs:
        label = f"{name} ‚Äî {price}‚ÇΩ" if price > 0 else f"{name} ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        menu.add(KeyboardButton(label))
    menu.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return menu

def format_key_message(access_url: str) -> str:
    return (
        f"*–í–∞—à –∫–ª—é—á* (–∫–æ—Å–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
        f"`{access_url}`\n\n"
        "üîß *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline:\n"
        "   ‚Ä¢ [App Store](https://apps.apple.com/app/outline-app/id1356177741)\n"
        "   ‚Ä¢ [Google Play](https://play.google.com/store/apps/details?id=org.outline.android.client)\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä¬ª –∏–ª–∏ ¬´+¬ª\n"
        "3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤—ã—à–µ"
    )

def format_key_message_unified(config: str, protocol: str, tariff: dict = None, remaining_time: int = None) -> str:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–æ–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    protocol_info = PROTOCOLS.get(protocol, {})
    protocol_name = protocol_info.get('name', protocol.upper())
    protocol_icon = protocol_info.get('icon', 'üîí')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    if remaining_time:
        time_str = format_duration(remaining_time)
        time_info = f"\n‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* {time_str}"
    else:
        time_info = ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    if tariff:
        tariff_info = f"\nüì¶ *–¢–∞—Ä–∏—Ñ:* {tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        if tariff.get('price_rub', 0) > 0:
            tariff_info += f" ‚Äî {tariff['price_rub']}‚ÇΩ"
        else:
            tariff_info += " ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    else:
        tariff_info = ""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    try:
        instructions = get_protocol_instructions(protocol)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {protocol}: {e}")
        instructions = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    
    return (
        f"{protocol_icon} *{protocol_name}*\n\n"
        f"*–í–∞—à –∫–ª—é—á* (–∫–æ—Å–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
        f"`{config}`\n\n"
        f"üîß *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n{instructions}"
        f"{tariff_info}{time_info}"
    )

def is_valid_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    return input_validator.validate_email(email)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id
    if args and args.isdigit() and int(args) != user_id:
        referrer_id = int(args)
        with get_db_cursor(commit=True) as cursor:
            cursor.execute("SELECT 1 FROM referrals WHERE referred_id = ?", (user_id,))
            if not cursor.fetchone():
                cursor.execute(
                    "INSERT INTO referrals (referrer_id, referred_id, created_at) VALUES (?, ?, ?)",
                    (referrer_id, user_id, int(time.time()))
                )
    # Clear any existing state
    if user_id in user_states:
        del user_states[user_id]
    await message.answer("–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def handle_buy_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª:",
            reply_markup=get_protocol_selection_menu()
        )
    except Exception as e:
        logging.error(f"Error showing protocol selection: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text in [f"{PROTOCOLS['outline']['icon']} {PROTOCOLS['outline']['name']}", 
                                        f"{PROTOCOLS['v2ray']['icon']} {PROTOCOLS['v2ray']['name']}"])
async def handle_protocol_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    user_id = message.from_user.id
    text = message.text or ""
    protocol = 'outline' if ('Outline' in text or 'Outline VPN' in text) else ('v2ray' if 'V2Ray' in text or 'VLESS' in text else 'outline')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'protocol_selected',
        'protocol': protocol
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    countries = get_countries_by_protocol(protocol)
    
    if not countries:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {PROTOCOLS[protocol]['name']} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª.",
            reply_markup=get_protocol_selection_menu()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:",
        reply_markup=get_country_menu(countries)
    )

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
async def handle_protocol_comparison(message: types.Message):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    comparison_text = """
üîí **Outline VPN**
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á

üõ°Ô∏è **V2Ray VLESS**
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ –õ—É—á—à–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º!
    """
    await message.answer(comparison_text, reply_markup=get_protocol_selection_menu(), parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üîô –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª:", reply_markup=get_protocol_selection_menu())

@dp.message_handler(lambda m: m.text == "–ú–æ–∏ –∫–ª—é—á–∏")
async def handle_my_keys_btn(message: types.Message):
    user_id = message.from_user.id
    now = int(time.time())
    
    with get_db_cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º Outline –∫–ª—é—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ
        cursor.execute("""
            SELECT k.access_url, k.expiry_at, k.protocol, s.country
            FROM keys k
            JOIN servers s ON k.server_id = s.id
            WHERE k.user_id = ? AND k.expiry_at > ?
        """, (user_id, now))
        outline_keys = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º V2Ray –∫–ª—é—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ –∏ —Å–µ—Ä–≤–µ—Ä–µ
        cursor.execute("""
            SELECT k.v2ray_uuid, k.expiry_at, s.domain, s.v2ray_path, s.country, k.email, s.api_url, s.api_key
            FROM v2ray_keys k
            JOIN servers s ON k.server_id = s.id
            WHERE k.user_id = ? AND k.expiry_at > ?
        """, (user_id, now))
        v2ray_keys = cursor.fetchall()

    all_keys = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º Outline –∫–ª—é—á–∏
    for access_url, exp, protocol, country in outline_keys:
        all_keys.append({
            'type': 'outline',
            'config': access_url,
            'expiry': exp,
            'protocol': protocol or 'outline',
            'country': country
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º V2Ray –∫–ª—é—á–∏
    for v2ray_uuid, exp, domain, path, country, email, api_url, api_key in v2ray_keys:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
        try:
            if api_url and api_key:
                server_config = {'api_url': api_url, 'api_key': api_key}
                protocol_client = ProtocolFactory.create_protocol('v2ray', server_config)
                config = await protocol_client.get_user_config(v2ray_uuid, {
                    'domain': domain,
                    'port': 443,
                    'path': path or '/v2ray',
                    'email': email or f"user_{user_id}@veilbot.com"
                })
            else:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
                config = f"vless://{v2ray_uuid}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{email or 'VeilBot-V2Ray'}"
        except Exception as e:
            logging.error(f"Error getting V2Ray config for {v2ray_uuid}: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            config = f"vless://{v2ray_uuid}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{email or 'VeilBot-V2Ray'}"
        
        all_keys.append({
            'type': 'v2ray',
            'config': config,
            'expiry': exp,
            'protocol': 'v2ray',
            'country': country
        })

    if not all_keys:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=main_menu)
        return

    msg = "*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:*\n\n"
    for key in all_keys:
        remaining_seconds = key['expiry'] - now
        time_str = format_duration(remaining_seconds)
        
        protocol_info = PROTOCOLS[key['protocol']]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if key['protocol'] == 'outline':
            app_links = "üì± [App Store](https://apps.apple.com/app/outline-app/id1356177741) | [Google Play](https://play.google.com/store/apps/details?id=org.outline.android.client)"
        else:  # v2ray
            app_links = "üì± [App Store](https://apps.apple.com/ru/app/v2raytun/id6476628951) | [Google Play](https://play.google.com/store/apps/details?id=com.v2raytun.android)"
            
        msg += (
            f"{protocol_info['icon']} *{protocol_info['name']}*\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {key['country']}\n"
            f"`{key['config']}`\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_str}\n"
            f"{app_links}\n\n"
        )
    
    await message.answer(msg, reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    # Clear any existing state
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' (—Ç–µ–ø–µ—Ä—å –≤—ã—à–µ –≤—Å–µ—Ö —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö) ---
@dp.message_handler(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
async def handle_invite_friend(message: types.Message):
    logging.debug(f"handle_invite_friend called: user_id={message.from_user.id}")
    user_id = message.from_user.id
    bot_username = (await bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start={user_id}"
    await bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n{invite_link}\n\n–ï—Å–ª–∏ –¥—Ä—É–≥ –∫—É–ø–∏—Ç –¥–æ—Å—Ç—É–ø, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
        reply_markup=main_menu
    )

# Handle email input
@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "waiting_email")
async def handle_email_input(message: types.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        user_id = message.from_user.id
        user_states.pop(user_id, None)
        await handle_invite_friend(message)
        return
    
    user_id = message.from_user.id
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ email
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        if not input_validator.validate_sql_injection(email):
            await message.answer("‚ùå Email —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.", reply_markup=cancel_keyboard)
            return
        
        # –û—á–∏—â–∞–µ–º email –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        email = input_validator.sanitize_string(email, max_length=100)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç email
        if not is_valid_email(email):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:", reply_markup=cancel_keyboard)
            return
        
        logging.debug(f"handle_email_input called: user_id={user_id}, email={email}, state={user_states.get(user_id)}")
        
        state = user_states.get(user_id, {})
        tariff = state.get("tariff")
        country = state.get("country")
        protocol = state.get("protocol", "outline")
        del user_states[user_id]
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email
        await create_payment_with_email_and_protocol(message, user_id, tariff, email, country, protocol)
        
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}", reply_markup=cancel_keyboard)
    except Exception as e:
        logging.error(f"Error in handle_email_input: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_keyboard)

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "reactivation_country_selection")
async def handle_reactivation_country_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–ª—é—á–∞"""
    user_id = message.from_user.id
    text = message.text or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states.pop(user_id, None)
        await message.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = user_states.get(user_id, {})
    tariff = state.get("tariff")
    email = state.get("email")
    protocol = state.get("protocol", "outline")
    last_country = state.get("last_country")
    
    if not tariff:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
        user_states.pop(user_id, None)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    selected_country = text
    if text.startswith("üîÑ ") and "(–∫–∞–∫ —Ä–∞–Ω—å—à–µ)" in text:
        # –£–±–∏—Ä–∞–µ–º "üîÑ " –∏ " (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)"
        selected_country = text[2:].replace(" (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    countries = get_countries_by_protocol(protocol)
    if selected_country not in countries:
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è {PROTOCOLS[protocol]['name']}:",
            reply_markup=get_country_menu(countries)
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π
    user_states.pop(user_id, None)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    with get_db_cursor(commit=True) as cursor:
        await create_new_key_flow_with_protocol(cursor, message, user_id, tariff, email, selected_country, protocol)

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "country_change_selection")
async def handle_country_change_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    user_id = message.from_user.id
    text = message.text or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        user_states.pop(user_id, None)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏)
    if text.startswith("üåç "):
        selected_country = text[2:]  # –£–±–∏—Ä–∞–µ–º "üåç "
    else:
        selected_country = text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state = user_states.get(user_id, {})
    key_data = state.get("key_data")
    
    if not key_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states.pop(user_id, None)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–º–µ–Ω—É —Å—Ç—Ä–∞–Ω—ã
    await change_country_for_key(message, user_id, key_data, selected_country)

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "waiting_country")
async def handle_country_selection(message: types.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        user_id = message.from_user.id
        user_states.pop(user_id, None)
        await handle_invite_friend(message)
        return
    
    user_id = message.from_user.id
    country = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        if not input_validator.validate_sql_injection(country):
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.", reply_markup=cancel_keyboard)
            return
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        country = input_validator.sanitize_string(country, max_length=50)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        if not input_validator.validate_country(country):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.", reply_markup=cancel_keyboard)
            return
        
        countries = get_countries()
        if country not in countries:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_country_menu(countries))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
        user_states[user_id] = {"state": "waiting_tariff", "country": country}
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_tariff_menu())
        
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}", reply_markup=cancel_keyboard)
    except Exception as e:
        logging.error(f"Error in handle_country_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_keyboard)

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "protocol_selected")
async def handle_protocol_country_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥":
            user_id = message.from_user.id
            user_states.pop(user_id, None)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª:", reply_markup=get_protocol_selection_menu())
            return
        
        if message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
            user_id = message.from_user.id
            user_states.pop(user_id, None)
            await handle_invite_friend(message)
            return
        
        user_id = message.from_user.id
        user_state = user_states.get(user_id, {})
        country = (message.text or "").strip()
        protocol = user_state.get("protocol", "outline")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        countries = get_countries_by_protocol(protocol)
        
        if country not in countries:
            protocol_info = PROTOCOLS.get(protocol, {"name": protocol})
            await message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è {protocol_info['name']}:", 
                reply_markup=get_country_menu(countries)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
        user_states[user_id] = {
            "state": "waiting_tariff", 
            "country": country,
            "protocol": protocol
        }
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_tariff_menu())
    except Exception as e:
        logging.error(f"Error in handle_protocol_country_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–Ω–æ–≤–æ.", reply_markup=get_protocol_selection_menu())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get("state") == "waiting_tariff" and "‚Äî" in m.text and any(w in m.text for w in ["‚ÇΩ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]))
async def handle_tariff_selection_with_country(message: types.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        user_id = message.from_user.id
        user_states.pop(user_id, None)
        await handle_invite_friend(message)
        return
    user_id = message.from_user.id
    label = message.text.strip()
    state = user_states.get(user_id, {})
    country = state.get("country")
    protocol = state.get("protocol", "outline")  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    
    # Parse tariff name and price from the label
    parts = label.split("‚Äî")
    if len(parts) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞—Ä–∏—Ñ–∞.", reply_markup=main_menu)
        return
    tariff_name = parts[0].strip()
    price_part = parts[1].strip()
    if "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" in price_part:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
        if user_states.get(user_id, {}).get("paid_only"):
            await message.answer("–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", reply_markup=get_tariff_menu(paid_only=True))
            return
        price = 0
    else:
        try:
            price = int(price_part.replace("‚ÇΩ", "").strip())
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.", reply_markup=main_menu)
            return
    with get_db_cursor(commit=True) as cursor:
        tariff = get_tariff_by_name_and_price(cursor, tariff_name, price)
        if not tariff:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ.", reply_markup=main_menu)
            return
        if tariff['price_rub'] == 0 and not user_states.get(user_id, {}).get("paid_only"):
            await handle_free_tariff_with_protocol(cursor, message, user_id, tariff, country, protocol)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ –ë–î
            if user_states.get(user_id, {}).get("paid_only"):
                email_db = None
                try:
                    now_ts = int(time.time())
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    cursor.execute("SELECT email FROM payments WHERE user_id = ? AND email IS NOT NULL AND email != '' AND email NOT LIKE 'user_%@veilbot.com' ORDER BY created_at DESC LIMIT 1", (user_id,))
                    row = cursor.fetchone()
                    email_db = row[0] if row and row[0] else None
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ payments, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –µ—Å–ª–∏ outline
                    # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ email-—ã –≤–∏–¥–∞ user_123@veilbot.com
                    if not email_db and (protocol or 'outline') == 'outline':
                        cursor.execute("SELECT email FROM keys WHERE user_id = ? AND email IS NOT NULL AND email != '' AND email NOT LIKE 'user_%@veilbot.com' ORDER BY expiry_at DESC LIMIT 1", (user_id,))
                        row = cursor.fetchone()
                        email_db = row[0] if row and row[0] else None
                    
                    # –§–æ–ª–±—ç–∫: –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ v2ray_keys, —Ç–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                    if not email_db:
                        cursor.execute("SELECT email FROM v2ray_keys WHERE user_id = ? AND email IS NOT NULL AND email != '' AND email NOT LIKE 'user_%@veilbot.com' ORDER BY expiry_at DESC LIMIT 1", (user_id,))
                        row2 = cursor.fetchone()
                        email_db = row2[0] if row2 and row2[0] else None
                except Exception:
                    email_db = None

                if not email_db:
                    email_db = f"user_{user_id}@veilbot.com"

                # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
                user_states[user_id] = {}
                await create_payment_with_email_and_protocol(message, user_id, tariff, email_db, country, protocol)
            else:
                await handle_paid_tariff_with_protocol(cursor, message, user_id, tariff, country, protocol)

def get_tariff_by_name_and_price(cursor, tariff_name, price):
    cursor.execute("SELECT id, name, price_rub, duration_sec FROM tariffs WHERE name = ? AND price_rub = ?", (tariff_name, price))
    row = cursor.fetchone()
    if not row:
        return None
    return {"id": row[0], "name": row[1], "price_rub": row[2], "duration_sec": row[3]}

async def handle_free_tariff(cursor, message, user_id, tariff, country=None):
    if check_free_tariff_limit(cursor, user_id):
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ —Ä–∞–Ω–µ–µ. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
        return
    now = int(time.time())
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –µ–≥–æ —Ç–∏–ø
    cursor.execute("""
        SELECT k.id, k.expiry_at, t.price_rub
        FROM keys k
        JOIN tariffs t ON k.tariff_id = t.id
        WHERE k.user_id = ? AND k.expiry_at > ?
        ORDER BY k.expiry_at DESC LIMIT 1
    """, (user_id, now))
    existing_key = cursor.fetchone()
    if existing_key:
        if existing_key[2] > 0:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=main_menu)
            return
        else:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
            return
    else:
        await create_new_key_flow(cursor, message, user_id, tariff, None, country)

def check_free_tariff_limit(cursor, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π - –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–≤—Å–µ–≥–¥–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return check_free_tariff_limit_by_protocol_and_country(cursor, user_id, "outline")

def check_free_tariff_limit_by_protocol_and_country(cursor, user_id, protocol="outline", country=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã - –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–≤—Å–µ–≥–¥–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ free_key_usage - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤–æ–æ–±—â–µ
    cursor.execute("""
        SELECT created_at FROM free_key_usage 
        WHERE user_id = ? AND protocol = ?
    """, (user_id, protocol))
    
    row = cursor.fetchone()
    if row:
        return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –Ω–µ—ë
    if country:
        cursor.execute("""
            SELECT created_at FROM free_key_usage 
            WHERE user_id = ? AND protocol = ? AND country = ?
        """, (user_id, protocol, country))
        
        row = cursor.fetchone()
        if row:
            return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∫–ª—é—á–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if protocol == "outline":
        if country:
            cursor.execute("""
                SELECT k.created_at FROM keys k
                JOIN tariffs t ON k.tariff_id = t.id
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND t.price_rub = 0 AND s.country = ?
                ORDER BY k.created_at DESC LIMIT 1
            """, (user_id, country))
        else:
            cursor.execute("""
                SELECT k.created_at FROM keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE k.user_id = ? AND t.price_rub = 0
                ORDER BY k.created_at DESC LIMIT 1
            """, (user_id,))
    else:  # v2ray
        if country:
            cursor.execute("""
                SELECT k.created_at FROM v2ray_keys k
                JOIN tariffs t ON k.tariff_id = t.id
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND t.price_rub = 0 AND s.country = ?
                ORDER BY k.created_at DESC LIMIT 1
            """, (user_id, country))
        else:
            cursor.execute("""
                SELECT k.created_at FROM v2ray_keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE k.user_id = ? AND t.price_rub = 0
                ORDER BY k.created_at DESC LIMIT 1
            """, (user_id,))
    
    row = cursor.fetchone()
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ª—é–±–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á ‚Äî –Ω–µ–ª—å–∑—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–≤—Å–µ–≥–¥–∞)
    if row:
        return True
    # –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ
    return False

def check_free_tariff_limit_by_protocol(cursor, user_id, protocol="outline"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–≤—Å–µ–≥–¥–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return check_free_tariff_limit_by_protocol_and_country(cursor, user_id, protocol)

def record_free_key_usage(cursor, user_id, protocol="outline", country=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    now = int(time.time())
    try:
        cursor.execute("""
            INSERT INTO free_key_usage (user_id, protocol, country, created_at)
            VALUES (?, ?, ?, ?)
        """, (user_id, protocol, country, now))
        return True
    except sqlite3.IntegrityError:
        # –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (UNIQUE constraint)
        return False
    except Exception as e:
        logging.error(f"Failed to record free key usage: {e}")
        return False

def check_server_availability(api_url, cert_sha256, protocol='outline'):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if protocol == 'outline':
            # –î–ª—è Outline –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            import requests
            response = requests.get(f"{api_url}/access-keys", verify=False, timeout=10)
            return response.status_code == 200
        elif protocol == 'v2ray':
            # –î–ª—è V2Ray –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            import requests
            response = requests.get(f"{api_url}/", verify=False, timeout=10)
            return response.status_code == 200
        return False
    except Exception as e:
        logging.warning(f"Server availability check failed: {e}")
        return False

def find_alternative_server(cursor, country, protocol, exclude_server_id=None):
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    if country:
        cursor.execute("""
            SELECT id, name, api_url, cert_sha256, domain, api_key, v2ray_path 
            FROM servers 
            WHERE active = 1 AND country = ? AND protocol = ? AND id != ?
            ORDER BY RANDOM() LIMIT 1
        """, (country, protocol, exclude_server_id or 0))
    else:
        cursor.execute("""
            SELECT id, name, api_url, cert_sha256, domain, api_key, v2ray_path 
            FROM servers 
            WHERE active = 1 AND protocol = ? AND id != ?
            ORDER BY RANDOM() LIMIT 1
        """, (protocol, exclude_server_id or 0))
    
    row = cursor.fetchone()
    if not row:
        return None
    
    return row

async def extend_existing_key_with_fallback(cursor, existing_key, duration, email=None, tariff_id=None, protocol='outline'):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á —Å fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
    now = int(time.time())
    # –ï—Å–ª–∏ –∫–ª—é—á –∏—Å—Ç—ë–∫, –ø—Ä–æ–¥–ª—è–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω–∞—á–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ expiry_at
    if existing_key[1] <= now:
        new_expiry = now + duration
        logging.info(f"Extending expired key {existing_key[0]} ({protocol}): was expired at {existing_key[1]}, new expiry: {new_expiry}")
    else:
        new_expiry = existing_key[1] + duration
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    if protocol == 'outline':
        cursor.execute("SELECT server_id FROM keys WHERE id = ?", (existing_key[0],))
        server_id = cursor.fetchone()[0]
        
        cursor.execute("SELECT api_url, cert_sha256, country FROM servers WHERE id = ?", (server_id,))
        server_data = cursor.fetchone()
        
        if not server_data:
            logging.error(f"Server {server_id} not found for key {existing_key[0]}")
            return False
        
        api_url, cert_sha256, country = server_data
    else:  # v2ray
        server_id = existing_key[5]  # server_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute("SELECT api_url, api_key, country FROM servers WHERE id = ?", (server_id,))
        server_data = cursor.fetchone()
        
        if not server_data:
            logging.error(f"Server {server_id} not found for V2Ray key {existing_key[0]}")
            return False
        
        api_url, api_key, country = server_data
        cert_sha256 = None  # –î–ª—è V2Ray –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if check_server_availability(api_url, cert_sha256, protocol):
        # –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
        if protocol == 'outline':
            if email and tariff_id:
                cursor.execute("UPDATE keys SET expiry_at = ?, email = ?, tariff_id = ? WHERE id = ?", (new_expiry, email, tariff_id, existing_key[0]))
            elif email:
                cursor.execute("UPDATE keys SET expiry_at = ?, email = ? WHERE id = ?", (new_expiry, email, existing_key[0]))
            elif tariff_id:
                cursor.execute("UPDATE keys SET expiry_at = ?, tariff_id = ? WHERE id = ?", (new_expiry, tariff_id, existing_key[0]))
            else:
                cursor.execute("UPDATE keys SET expiry_at = ? WHERE id = ?", (new_expiry, existing_key[0]))
        else:  # v2ray
            if email and tariff_id:
                cursor.execute("UPDATE v2ray_keys SET expiry_at = ?, email = ?, tariff_id = ? WHERE id = ?", (new_expiry, email, tariff_id, existing_key[0]))
            elif email:
                cursor.execute("UPDATE v2ray_keys SET expiry_at = ?, email = ? WHERE id = ?", (new_expiry, email, existing_key[0]))
            elif tariff_id:
                cursor.execute("UPDATE v2ray_keys SET expiry_at = ?, tariff_id = ? WHERE id = ?", (new_expiry, tariff_id, existing_key[0]))
            else:
                cursor.execute("UPDATE v2ray_keys SET expiry_at = ? WHERE id = ?", (new_expiry, existing_key[0]))
        return True
    else:
        # –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        logging.warning(f"Server {server_id} is not available, looking for alternative")
        alternative_server = find_alternative_server(cursor, country, protocol, server_id)
        
        if not alternative_server:
            logging.error(f"No alternative server found for country={country}, protocol={protocol}")
            return False
        
        alt_server_id, alt_name, alt_api_url, alt_cert_sha256, alt_domain, alt_api_key, alt_v2ray_path = alternative_server
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        if not check_server_availability(alt_api_url, alt_cert_sha256, protocol):
            logging.error(f"Alternative server {alt_server_id} is also not available")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            if protocol == 'outline':
                key = await asyncio.get_event_loop().run_in_executor(None, create_key, alt_api_url, alt_cert_sha256)
                if not key:
                    logging.error(f"Failed to create key on alternative server {alt_server_id}")
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    UPDATE keys 
                    SET server_id = ?, access_url = ?, key_id = ?, expiry_at = ?, email = ?, tariff_id = ?
                    WHERE id = ?
                """, (alt_server_id, key['accessUrl'], key['id'], new_expiry, email or '', tariff_id or 0, existing_key[0]))
                
                logging.info(f"Key {existing_key[0]} moved to alternative server {alt_server_id} ({alt_name})")
                return True
                
            elif protocol == 'v2ray':
                # –î–ª—è V2Ray —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                from vpn_protocols import V2RayProtocol
                v2ray_client = V2RayProtocol(alt_api_url, alt_api_key)
                user_data = await v2ray_client.create_user(email or f"user_{existing_key[0]}@veilbot.com")
                
                if not user_data or not user_data.get('uuid'):
                    logging.error(f"Failed to create V2Ray key on alternative server {alt_server_id}")
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    UPDATE v2ray_keys 
                    SET server_id = ?, v2ray_uuid = ?, expiry_at = ?, email = ?, tariff_id = ?
                    WHERE id = ?
                """, (alt_server_id, user_data['uuid'], new_expiry, email or '', tariff_id or 0, existing_key[0]))
                
                logging.info(f"V2Ray key {existing_key[0]} moved to alternative server {alt_server_id} ({alt_name})")
                return True
                
        except Exception as e:
            logging.error(f"Error creating key on alternative server: {e}")
            return False

def extend_existing_key(cursor, existing_key, duration, email=None, tariff_id=None):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∫–ª—é—á. –ï—Å–ª–∏ –∏—Å—Ç—ë–∫ - –ø—Ä–æ–¥–ª—è–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    now = int(time.time())
    # –ï—Å–ª–∏ –∫–ª—é—á –∏—Å—Ç—ë–∫, –ø—Ä–æ–¥–ª—è–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω–∞—á–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ expiry_at
    if existing_key[1] <= now:
        new_expiry = now + duration
        logging.info(f"Extending expired key {existing_key[0]}: was expired at {existing_key[1]}, new expiry: {new_expiry}")
    else:
        new_expiry = existing_key[1] + duration
    
    if email and tariff_id:
        cursor.execute("UPDATE keys SET expiry_at = ?, email = ?, tariff_id = ? WHERE id = ?", (new_expiry, email, tariff_id, existing_key[0]))
    elif email:
        cursor.execute("UPDATE keys SET expiry_at = ?, email = ? WHERE id = ?", (new_expiry, email, existing_key[0]))
    elif tariff_id:
        cursor.execute("UPDATE keys SET expiry_at = ?, tariff_id = ? WHERE id = ?", (new_expiry, tariff_id, existing_key[0]))
    else:
        cursor.execute("UPDATE keys SET expiry_at = ? WHERE id = ?", (new_expiry, existing_key[0]))

async def create_new_key_flow(cursor, message, user_id, tariff, email=None, country=None):
    now = int(time.time())
    GRACE_PERIOD = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    grace_threshold = now - GRACE_PERIOD
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–ª—é—á–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö grace period)
    cursor.execute("SELECT id, expiry_at, access_url FROM keys WHERE user_id = ? AND expiry_at > ? ORDER BY expiry_at DESC LIMIT 1", (user_id, grace_threshold))
    existing_key = cursor.fetchone()
    if existing_key:
        extend_existing_key(cursor, existing_key, tariff['duration_sec'], email, tariff['id'])
        was_expired = existing_key[1] <= now
        if was_expired:
            await message.answer(f"‚úÖ –í–∞—à –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message(existing_key[2])}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
        else:
            await message.answer(f"–í–∞—à –∫–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message(existing_key[2])}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üîë *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–ö–ª—é—á: `{existing_key[2]}`\n"
        )
        if email:
            admin_msg += f"Email: `{email}`\n"
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"Failed to send admin notification: {e}")
        return
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    server = select_available_server(cursor, country)
    if not server:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=main_menu)
        return
    key = await asyncio.get_event_loop().run_in_executor(None, create_key, server['api_url'], server['cert_sha256'])
    if not key:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞.", reply_markup=main_menu)
        return
    expiry = now + tariff['duration_sec']
    cursor.execute(
        "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
        "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        (server['id'], user_id, key["accessUrl"], expiry, key["id"], now, email, tariff['id'])
    )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    if tariff['price_rub'] == 0:
        record_free_key_usage(cursor, user_id, "outline", country)
    
    await message.answer(format_key_message(key["accessUrl"]), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
    # Admin notification as before
    admin_msg = (
        f"üîë *–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
        f"–ö–ª—é—á: `{key['accessUrl']}`\n"
    )
    if email:
        admin_msg += f"Email: `{email}`\n"
    try:
        await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Failed to send admin notification: {e}")

async def switch_protocol_and_extend(cursor, message, user_id, old_key_data: dict, new_protocol: str, new_country: str, additional_duration: int, email: str, tariff: dict):
    """–ú–µ–Ω—è–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª (–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω—É) —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    now = int(time.time())
    old_protocol = old_key_data['protocol']
    old_country = old_key_data['country']
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω—É —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
    target_country = new_country or old_country
    
    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
    remaining = max(0, old_key_data['expiry_at'] - now)
    
    # –û–±—â–µ–µ –≤—Ä–µ–º—è = –æ—Å—Ç–∞–≤—à–µ–µ—Å—è + –Ω–æ–≤–æ–µ –∫—É–ø–ª–µ–Ω–Ω–æ–µ
    total_duration = remaining + additional_duration
    new_expiry = now + total_duration
    
    old_server_id = old_key_data['server_id']
    old_email = old_key_data.get('email') or email
    
    logging.info(f"User {user_id}: switching protocol {old_protocol}‚Üí{new_protocol}, country {old_country}‚Üí{target_country}, remaining={remaining}s, adding={additional_duration}s")
    
    # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–µ —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
    cursor.execute("""
        SELECT id, api_url, cert_sha256, domain, v2ray_path, api_key FROM servers 
        WHERE active = 1 AND country = ? AND protocol = ?
    """, (target_country, new_protocol))
    servers = cursor.fetchall()
    
    if not servers:
        logging.error(f"No servers found for protocol={new_protocol}, country={target_country}")
        await message.answer(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[new_protocol]['name']} –≤ —Å—Ç—Ä–∞–Ω–µ {target_country}.", reply_markup=main_menu)
        return False
    
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä
    new_server_id, api_url, cert_sha256, domain, v2ray_path, api_key = servers[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    old_key_for_deletion = {
        'type': old_key_data['type'],
        'server_id': old_server_id,
        'key_id': old_key_data.get('key_id'),
        'v2ray_uuid': old_key_data.get('v2ray_uuid'),
        'db_id': old_key_data['id']
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ –Ω–æ–≤–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
        if new_protocol == "outline":
            key = await asyncio.get_event_loop().run_in_executor(None, create_key, api_url, cert_sha256)
            if not key:
                logging.error(f"Failed to create Outline key on server {new_server_id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=main_menu)
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            cursor.execute(
                "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, key["accessUrl"], new_expiry, key["id"], now, old_email, tariff['id'])
            )
            
            access_url = key["accessUrl"]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
            await delete_old_key_after_success(cursor, old_key_for_deletion)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            time_remaining_str = format_duration(remaining)
            time_added_str = format_duration(additional_duration)
            time_total_str = format_duration(total_duration)
            
            if old_country != target_country:
                msg = (
                    f"üåçüîÑ *–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã*\n\n"
                    f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω:\n"
                    f"‚Ä¢ –° *{PROTOCOLS[old_protocol]['name']}* –Ω–∞ *{PROTOCOLS[new_protocol]['name']}*\n"
                    f"‚Ä¢ –ò–∑ *{old_country}* –≤ *{target_country}*\n\n"
                    f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                    f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                    f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                    f"{format_key_message_unified(access_url, new_protocol, tariff)}"
                )
            else:
                msg = (
                    f"üîÑ *–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ*\n\n"
                    f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å *{PROTOCOLS[old_protocol]['name']}* –Ω–∞ *{PROTOCOLS[new_protocol]['name']}*\n"
                    f"–°—Ç—Ä–∞–Ω–∞: *{target_country}*\n\n"
                    f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                    f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                    f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                    f"{format_key_message_unified(access_url, new_protocol, tariff)}"
                )
            await message.answer(msg, reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
            
        elif new_protocol == "v2ray":
            from vpn_protocols import V2RayProtocol
            v2ray_client = V2RayProtocol(api_url, api_key)
            user_data = await v2ray_client.create_user(old_email or f"user_{user_id}@veilbot.com")
            
            if not user_data or not user_data.get('uuid'):
                logging.error(f"Failed to create V2Ray key on server {new_server_id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ V2Ray –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=main_menu)
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            cursor.execute(
                "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, expiry_at, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, user_data['uuid'], new_expiry, now, old_email, tariff['id'])
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º access_url
            access_url = f"vless://{user_data['uuid']}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{old_email or 'VeilBot-V2Ray'}"
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
            await delete_old_key_after_success(cursor, old_key_for_deletion)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            time_remaining_str = format_duration(remaining)
            time_added_str = format_duration(additional_duration)
            time_total_str = format_duration(total_duration)
            
            if old_country != target_country:
                msg = (
                    f"üåçüîÑ *–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã*\n\n"
                    f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω:\n"
                    f"‚Ä¢ –° *{PROTOCOLS[old_protocol]['name']}* –Ω–∞ *{PROTOCOLS[new_protocol]['name']}*\n"
                    f"‚Ä¢ –ò–∑ *{old_country}* –≤ *{target_country}*\n\n"
                    f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                    f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                    f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                    f"{format_key_message_unified(access_url, new_protocol, tariff)}"
                )
            else:
                msg = (
                    f"üîÑ *–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ*\n\n"
                    f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å *{PROTOCOLS[old_protocol]['name']}* –Ω–∞ *{PROTOCOLS[new_protocol]['name']}*\n"
                    f"–°—Ç—Ä–∞–Ω–∞: *{target_country}*\n\n"
                    f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                    f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                    f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                    f"{format_key_message_unified(access_url, new_protocol, tariff)}"
                )
            await message.answer(msg, reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üîÑüåç *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–°—Ç–∞—Ä—ã–π: *{PROTOCOLS[old_protocol]['name']}*, {old_country}\n"
            f"–ù–æ–≤—ã–π: *{PROTOCOLS[new_protocol]['name']}*, {target_country}\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä: `{old_server_id}`\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: `{new_server_id}`\n"
            f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {format_duration(remaining)}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {format_duration(additional_duration)}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(new_expiry))}</code>\n"
        )
        if old_email:
            admin_msg += f"Email: `{old_email}`\n"
        
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to send admin notification (protocol switch): {e}")
        
        # Commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.connection.commit()
        
        logging.info(f"Successfully switched protocol for user {user_id}: {old_protocol}‚Üí{new_protocol}, {old_country}‚Üí{target_country}, total={total_duration}s")
        return True
        
    except Exception as e:
        logging.error(f"Error in switch_protocol_and_extend: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
        return False

async def change_country_and_extend(cursor, message, user_id, key_data: dict, new_country: str, additional_duration: int, email: str, tariff: dict):
    """–ú–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∫–ª—é—á–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)"""
    now = int(time.time())
    protocol = key_data['protocol']
    
    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
    remaining = max(0, key_data['expiry_at'] - now)
    
    # –û–±—â–µ–µ –≤—Ä–µ–º—è = –æ—Å—Ç–∞–≤—à–µ–µ—Å—è + –Ω–æ–≤–æ–µ –∫—É–ø–ª–µ–Ω–Ω–æ–µ
    total_duration = remaining + additional_duration
    new_expiry = now + total_duration
    
    old_server_id = key_data['server_id']
    old_country = key_data['country']
    old_email = key_data['email'] or email
    
    # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–µ —Å —Ç–µ–º –∂–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
    cursor.execute("""
        SELECT id, api_url, cert_sha256, domain, v2ray_path, api_key FROM servers 
        WHERE active = 1 AND country = ? AND protocol = ?
    """, (new_country, protocol))
    servers = cursor.fetchall()
    
    if not servers:
        logging.error(f"No servers found for country={new_country}, protocol={protocol}")
        await message.answer(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[protocol]['name']} –≤ —Å—Ç—Ä–∞–Ω–µ {new_country}.", reply_markup=main_menu)
        return False
    
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä
    new_server_id, api_url, cert_sha256, domain, v2ray_path, api_key = servers[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    old_key_data = {
        'type': key_data['type'],
        'server_id': old_server_id,
        'key_id': key_data.get('key_id'),
        'v2ray_uuid': key_data.get('v2ray_uuid'),
        'db_id': key_data['id']
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–µ
        if protocol == "outline":
            key = await asyncio.get_event_loop().run_in_executor(None, create_key, api_url, cert_sha256)
            if not key:
                logging.error(f"Failed to create Outline key on server {new_server_id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=main_menu)
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            cursor.execute(
                "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, key["accessUrl"], new_expiry, key["id"], now, old_email, tariff['id'])
            )
            
            access_url = key["accessUrl"]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
            await delete_old_key_after_success(cursor, old_key_data)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            time_remaining_str = format_duration(remaining)
            time_added_str = format_duration(additional_duration)
            time_total_str = format_duration(total_duration)
            
            msg = (
                f"üåç *–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ*\n\n"
                f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ *{old_country}* –≤ *{new_country}*\n\n"
                f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                f"{format_key_message_unified(access_url, protocol, tariff)}"
            )
            await message.answer(msg, reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
            
        elif protocol == "v2ray":
            from vpn_protocols import V2RayProtocol
            v2ray_client = V2RayProtocol(api_url, api_key)
            user_data = await v2ray_client.create_user(old_email or f"user_{user_id}@veilbot.com")
            
            if not user_data or not user_data.get('uuid'):
                logging.error(f"Failed to create V2Ray key on server {new_server_id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ V2Ray –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=main_menu)
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            cursor.execute(
                "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, expiry_at, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, user_data['uuid'], new_expiry, now, old_email, tariff['id'])
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º access_url
            access_url = f"vless://{user_data['uuid']}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{old_email or 'VeilBot-V2Ray'}"
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
            await delete_old_key_after_success(cursor, old_key_data)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            time_remaining_str = format_duration(remaining)
            time_added_str = format_duration(additional_duration)
            time_total_str = format_duration(total_duration)
            
            msg = (
                f"üåç *–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ*\n\n"
                f"–í–∞—à –∫–ª—é—á –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ *{old_country}* –≤ *{new_country}*\n\n"
                f"‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_remaining_str}\n"
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {time_added_str}\n"
                f"üìÖ –ò—Ç–æ–≥–æ: {time_total_str}\n\n"
                f"{format_key_message_unified(access_url, protocol, tariff)}"
            )
            await message.answer(msg, reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üåç *–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[protocol]['name']}*\n"
            f"–°—Ç–∞—Ä–∞—è —Å—Ç—Ä–∞–Ω–∞: *{old_country}*\n"
            f"–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: *{new_country}*\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä: `{old_server_id}`\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: `{new_server_id}`\n"
            f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {format_duration(remaining)}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {format_duration(additional_duration)}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(new_expiry))}</code>\n"
        )
        if old_email:
            admin_msg += f"Email: `{old_email}`\n"
        
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to send admin notification (country change with extend): {e}")
        
        # Commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.connection.commit()
        
        logging.info(f"Successfully changed country and extended for user {user_id}: {old_country} -> {new_country}, +{additional_duration}s")
        return True
        
    except Exception as e:
        logging.error(f"Error in change_country_and_extend: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
        return False

async def create_new_key_flow_with_protocol(cursor, message, user_id, tariff, email=None, country=None, protocol="outline"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    now = int(time.time())
    GRACE_PERIOD = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    grace_threshold = now - GRACE_PERIOD
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–ª—é—á–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö grace period)
    if protocol == "outline":
        cursor.execute("SELECT k.id, k.expiry_at, k.access_url, s.country, k.server_id, k.key_id, k.tariff_id, k.email FROM keys k JOIN servers s ON k.server_id = s.id WHERE k.user_id = ? AND k.expiry_at > ? ORDER BY k.expiry_at DESC LIMIT 1", (user_id, grace_threshold))
        existing_key = cursor.fetchone()
        if existing_key:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
            current_country = existing_key[3]  # s.country
            
            if country and country != current_country:
                # –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                logging.info(f"User {user_id} requested different country: current={current_country}, requested={country}. Running country change logic.")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º key_data –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã
                key_data = {
                    'id': existing_key[0],
                    'expiry_at': existing_key[1],
                    'access_url': existing_key[2],
                    'country': current_country,
                    'server_id': existing_key[4],
                    'key_id': existing_key[5],
                    'tariff_id': existing_key[6] or tariff['id'],
                    'email': existing_key[7] or email,
                    'protocol': protocol,
                    'type': 'outline'
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                success = await change_country_and_extend(cursor, message, user_id, key_data, country, tariff['duration_sec'], email, tariff)
                
                if success:
                    user_states.pop(user_id, None)
                    return
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                    logging.warning(f"Failed to change country for key {existing_key[0]}, creating new key for user {user_id}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            else:
                # –¢–∞ –∂–µ —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                success = await extend_existing_key_with_fallback(cursor, existing_key, tariff['duration_sec'], email, tariff['id'], protocol)
            
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
                    cursor.execute("SELECT access_url FROM keys WHERE id = ?", (existing_key[0],))
                    updated_key = cursor.fetchone()
                    access_url = updated_key[0] if updated_key else existing_key[2]
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_states.pop(user_id, None)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª—é—á –∏—Å—Ç–µ–∫—à–∏–º
                    was_expired = existing_key[1] <= now
                    if was_expired:
                        await message.answer(f"‚úÖ –í–∞—à –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message_unified(access_url, protocol, tariff)}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                    else:
                        await message.answer(f"–í–∞—à –∫–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message_unified(access_url, protocol, tariff)}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                    return
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                    logging.warning(f"Failed to extend key {existing_key[0]}, creating new key for user {user_id}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    else:  # v2ray
        cursor.execute("SELECT k.id, k.expiry_at, k.v2ray_uuid, s.domain, s.v2ray_path, k.server_id, s.country, k.tariff_id, k.email FROM v2ray_keys k JOIN servers s ON k.server_id = s.id WHERE k.user_id = ? AND k.expiry_at > ? ORDER BY k.expiry_at DESC LIMIT 1", (user_id, grace_threshold))
        existing_key = cursor.fetchone()
        if existing_key:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
            current_country = existing_key[6]  # s.country
            
            if country and country != current_country:
                # –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                logging.info(f"User {user_id} requested different country for V2Ray: current={current_country}, requested={country}. Running country change logic.")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º key_data –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã
                key_data = {
                    'id': existing_key[0],
                    'expiry_at': existing_key[1],
                    'v2ray_uuid': existing_key[2],
                    'domain': existing_key[3],
                    'v2ray_path': existing_key[4],
                    'country': current_country,
                    'server_id': existing_key[5],
                    'tariff_id': existing_key[7] or tariff['id'],
                    'email': existing_key[8] or email,
                    'protocol': protocol,
                    'type': 'v2ray'
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                success = await change_country_and_extend(cursor, message, user_id, key_data, country, tariff['duration_sec'], email, tariff)
                
                if success:
                    user_states.pop(user_id, None)
                    return
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                    logging.warning(f"Failed to change country for V2Ray key {existing_key[0]}, creating new key for user {user_id}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            else:
                # –¢–∞ –∂–µ —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                success = await extend_existing_key_with_fallback(cursor, existing_key, tariff['duration_sec'], email, tariff['id'], protocol)
            
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
                    cursor.execute("SELECT k.v2ray_uuid, s.domain, s.v2ray_path FROM v2ray_keys k JOIN servers s ON k.server_id = s.id WHERE k.id = ?", (existing_key[0],))
                    updated_key = cursor.fetchone()
                    
                    if updated_key:
                        v2ray_uuid, domain, path = updated_key
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Reality –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                        config = f"vless://{v2ray_uuid}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{email or 'VeilBot-V2Ray'}"
                    else:
                        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        v2ray_uuid = existing_key[2]
                        domain = existing_key[3]
                        path = existing_key[4] or '/v2ray'
                        config = f"vless://{v2ray_uuid}@{domain}:443?encryption=none&security=reality&sni=www.microsoft.com&fp=chrome&pbk=TJcEEU2FS6nX_mBo-qXiuq9xBaP1nAcVia1MlYyUHWQ&sid=827d3b463ef6638f&spx=/&type=tcp&flow=#{email or 'VeilBot-V2Ray'}"
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_states.pop(user_id, None)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª—é—á –∏—Å—Ç–µ–∫—à–∏–º
                    was_expired = existing_key[1] <= now
                    if was_expired:
                        await message.answer(f"‚úÖ –í–∞—à –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message_unified(config, protocol, tariff)}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                    else:
                        await message.answer(f"–í–∞—à –∫–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {format_duration(tariff['duration_sec'])}!\n\n{format_key_message_unified(config, protocol, tariff)}", reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                    return
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                    logging.warning(f"Failed to extend V2Ray key {existing_key[0]}, creating new key for user {user_id}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    # –≠—Ç–æ –≤–∞–∂–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –Ω–∞—à–ª–∏ –∫–ª—é—á –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—ã—à–µ
    if protocol == "outline":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ V2Ray –∫–ª—é—á
        cursor.execute("SELECT k.id, k.expiry_at, k.v2ray_uuid, s.domain, s.v2ray_path, k.server_id, s.country, k.tariff_id, k.email FROM v2ray_keys k JOIN servers s ON k.server_id = s.id WHERE k.user_id = ? AND k.expiry_at > ? ORDER BY k.expiry_at DESC LIMIT 1", (user_id, grace_threshold))
        opposite_key = cursor.fetchone()
        
        if opposite_key:
            # –ù–∞—à–ª–∏ V2Ray –∫–ª—é—á, —Ö–æ—Ç—è –ø–æ–∫—É–ø–∞–µ—Ç—Å—è Outline
            logging.info(f"User {user_id}: found V2Ray key while purchasing Outline. Switching protocol.")
            
            old_key_data = {
                'id': opposite_key[0],
                'expiry_at': opposite_key[1],
                'v2ray_uuid': opposite_key[2],
                'domain': opposite_key[3],
                'v2ray_path': opposite_key[4],
                'server_id': opposite_key[5],
                'country': opposite_key[6],
                'tariff_id': opposite_key[7],
                'email': opposite_key[8],
                'protocol': 'v2ray',
                'type': 'v2ray'
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            success = await switch_protocol_and_extend(cursor, message, user_id, old_key_data, protocol, country, tariff['duration_sec'], email, tariff)
            
            if success:
                user_states.pop(user_id, None)
                return
            else:
                logging.warning(f"Failed to switch protocol from v2ray to outline for user {user_id}, creating new key")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    
    else:  # protocol == "v2ray"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Outline –∫–ª—é—á
        cursor.execute("SELECT k.id, k.expiry_at, k.access_url, s.country, k.server_id, k.key_id, k.tariff_id, k.email FROM keys k JOIN servers s ON k.server_id = s.id WHERE k.user_id = ? AND k.expiry_at > ? ORDER BY k.expiry_at DESC LIMIT 1", (user_id, grace_threshold))
        opposite_key = cursor.fetchone()
        
        if opposite_key:
            # –ù–∞—à–ª–∏ Outline –∫–ª—é—á, —Ö–æ—Ç—è –ø–æ–∫—É–ø–∞–µ—Ç—Å—è V2Ray
            logging.info(f"User {user_id}: found Outline key while purchasing V2Ray. Switching protocol.")
            
            old_key_data = {
                'id': opposite_key[0],
                'expiry_at': opposite_key[1],
                'access_url': opposite_key[2],
                'country': opposite_key[3],
                'server_id': opposite_key[4],
                'key_id': opposite_key[5],
                'tariff_id': opposite_key[6],
                'email': opposite_key[7],
                'protocol': 'outline',
                'type': 'outline'
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            success = await switch_protocol_and_extend(cursor, message, user_id, old_key_data, protocol, country, tariff['duration_sec'], email, tariff)
            
            if success:
                user_states.pop(user_id, None)
                return
            else:
                logging.warning(f"Failed to switch protocol from outline to v2ray for user {user_id}, creating new key")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å—Ç—Ä–∞–Ω—É
    if country is None:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–∂–µ –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ —É–¥–∞–ª—ë–Ω)
        last_country = None
        if protocol == "outline":
            cursor.execute("""
                SELECT s.country 
                FROM keys k 
                JOIN servers s ON k.server_id = s.id 
                WHERE k.user_id = ? 
                ORDER BY k.created_at DESC 
                LIMIT 1
            """, (user_id,))
        else:  # v2ray
            cursor.execute("""
                SELECT s.country 
                FROM v2ray_keys k 
                JOIN servers s ON k.server_id = s.id 
                WHERE k.user_id = ? 
                ORDER BY k.created_at DESC 
                LIMIT 1
            """, (user_id,))
        
        country_row = cursor.fetchone()
        if country_row:
            last_country = country_row[0]
            
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –∏—Å—Ç–æ—Ä–∏—è - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
        if last_country:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
            user_states[user_id] = {
                'state': 'reactivation_country_selection',
                'tariff': tariff,
                'email': email,
                'protocol': protocol,
                'last_country': last_country
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            countries = get_countries_by_protocol(protocol)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–∂–Ω–µ–π —Å—Ç—Ä–∞–Ω—ã
            if last_country in countries:
                keyboard.add(KeyboardButton(f"üîÑ {last_country} (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
            for country_name in countries:
                if country_name != last_country:
                    keyboard.add(KeyboardButton(country_name))
            
            keyboard.add(KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
            
            await message.answer(
                f"‚ö†Ô∏è –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–ª—é—á –∏—Å—Ç—ë–∫ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –±—ã–ª –≤ —Å—Ç—Ä–∞–Ω–µ: **{last_country}**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ {PROTOCOLS[protocol]['name']}:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    server = select_available_server_by_protocol(cursor, country, protocol)
    if not server:
        await message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[protocol]['name']} –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ.", reply_markup=main_menu)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
        loading_msg = await message.answer(
            f"üîÑ –°–æ–∑–¥–∞—é –∫–ª—é—á {PROTOCOLS[protocol]['icon']} {PROTOCOLS[protocol]['name']}...\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            reply_markup=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª-–∫–ª–∏–µ–Ω—Ç —Å lazy loading
        server_config = {
            'api_url': server[2],
            'cert_sha256': server[3],
            'api_key': server[5],
            'domain': server[4],
            'path': server[6]
        }
        
        # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        global VPN_PROTOCOLS_AVAILABLE
        if VPN_PROTOCOLS_AVAILABLE is None:
            try:
                vpn_service = get_vpn_service()
                VPN_PROTOCOLS_AVAILABLE = vpn_service is not None
                if VPN_PROTOCOLS_AVAILABLE:
                    logging.info("VPN –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (lazy loading)")
                else:
                    logging.warning("VPN –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                VPN_PROTOCOLS_AVAILABLE = False
                logging.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: {e}")
        
        if VPN_PROTOCOLS_AVAILABLE:
            from vpn_protocols import ProtocolFactory
            protocol_client = ProtocolFactory.create_protocol(protocol, server_config)
        else:
            raise Exception("VPN –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        user_data = await protocol_client.create_user(email or f"user_{user_id}@veilbot.com")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if not user_data or not user_data.get('uuid' if protocol == 'v2ray' else 'id'):
            raise Exception(f"Failed to create {protocol} user - invalid response from server")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        expiry = now + tariff['duration_sec']
        
        if protocol == 'outline':
            cursor.execute("""
                INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id, protocol)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (server[0], user_id, user_data['accessUrl'], expiry, user_data['id'], now, email, tariff['id'], protocol))
            
            config = user_data['accessUrl']
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Outline –∫–ª—é—á–∞
            try:
                security_logger = get_security_logger()
                if security_logger:
                    security_logger.log_key_creation(
                        user_id=user_id,
                        key_id=user_data['id'],
                        protocol=protocol,
                        server_id=server[0],
                        tariff_id=tariff['id'],
                        ip_address=getattr(message, 'from_user', {}).get('id', None),
                        user_agent="Telegram Bot"
                    )
            except Exception as e:
                logging.error(f"Error logging key creation: {e}")
                
        else:  # v2ray
            cursor.execute("""
                INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, email, created_at, expiry_at, tariff_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (server[0], user_id, user_data['uuid'], email or f"user_{user_id}@veilbot.com", now, expiry, tariff['id']))
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = await protocol_client.get_user_config(user_data['uuid'], {
                'domain': server[4],
                'port': 443,
                'path': server[6] or '/v2ray',
                'email': email or f"user_{user_id}@veilbot.com"
            })
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è V2Ray –∫–ª—é—á–∞
            try:
                security_logger = get_security_logger()
                if security_logger:
                    security_logger.log_key_creation(
                        user_id=user_id,
                        key_id=user_data['uuid'],
                        protocol=protocol,
                        server_id=server[0],
                        tariff_id=tariff['id'],
                        ip_address=getattr(message, 'from_user', {}).get('id', None),
                        user_agent="Telegram Bot"
                    )
            except Exception as e:
                logging.error(f"Error logging key creation: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await loading_msg.delete()
        except:
            pass
        
        # –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        if tariff['price_rub'] == 0:
            record_free_key_usage(cursor, user_id, protocol, country)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            format_key_message_unified(config, protocol, tariff),
            reply_markup=main_menu,
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üîë *–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ {PROTOCOLS[protocol]['icon']}*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[protocol]['name']}*\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–ö–ª—é—á: `{config}`\n"
        )
        if email:
            admin_msg += f"Email: `{email}`\n"
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"Failed to send admin notification: {e}")
            
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        logging.error(f"Failed to create {protocol} key: {e}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
        try:
            security_logger = get_security_logger()
            if security_logger:
                security_logger.log_suspicious_activity(
                    user_id=user_id,
                    activity_type="key_creation_failed",
                    details=f"Failed to create {protocol} key: {str(e)}",
                    ip_address=getattr(message, 'from_user', {}).get('id', None),
                    user_agent="Telegram Bot"
                )
        except Exception as log_e:
            logging.error(f"Error logging key creation failure: {log_e}")
        
        try:
            if 'user_data' in locals() and user_data:
                if protocol == 'v2ray' and user_data.get('uuid'):
                    await protocol_client.delete_user(user_data['uuid'])
                    logging.info(f"Deleted V2Ray user {user_data['uuid']} from server due to error")
                elif protocol == 'outline' and user_data.get('id'):
                    # –î–ª—è Outline –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    from outline import delete_key
                    delete_key(server[2], server[3], user_data['id'])
                    logging.info(f"Deleted Outline key {user_data['id']} from server due to error")
        except Exception as cleanup_error:
            logging.error(f"Failed to cleanup {protocol} user after error: {cleanup_error}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await loading_msg.delete()
        except:
            pass
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ {PROTOCOLS[protocol]['icon']}.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_menu
        )
        return

def select_available_server_by_protocol(cursor, country=None, protocol='outline'):
    """–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    if country:
        cursor.execute("""
            SELECT id, name, api_url, cert_sha256, domain, api_key, v2ray_path 
            FROM servers 
            WHERE active = 1 AND country = ? AND protocol = ?
            ORDER BY RANDOM() LIMIT 1
        """, (country, protocol))
    else:
        cursor.execute("""
            SELECT id, name, api_url, cert_sha256, domain, api_key, v2ray_path 
            FROM servers 
            WHERE active = 1 AND protocol = ?
            ORDER BY RANDOM() LIMIT 1
        """, (protocol,))
    
    row = cursor.fetchone()
    if not row:
        return None
    
    return row

def format_key_message_with_protocol(config: str, protocol: str, tariff: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    protocol_info = PROTOCOLS[protocol]
    
    return (
        f"*–í–∞—à –∫–ª—é—á {protocol_info['icon']} {protocol_info['name']}* (–∫–æ—Å–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
        f"`{config}`\n\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: *{tariff['name']}*\n"
        f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *{format_duration(tariff['duration_sec'])}*\n\n"
        f"üîß *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n"
        f"{get_protocol_instructions(protocol)}"
    )

async def handle_free_tariff_with_protocol(cursor, message, user_id, tariff, country=None, protocol="outline"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
    if check_free_tariff_limit_by_protocol_and_country(cursor, user_id, protocol, country):
        if country:
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ {PROTOCOLS[protocol]['name']} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country} —Ä–∞–Ω–µ–µ. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
        else:
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ {PROTOCOLS[protocol]['name']} —Ä–∞–Ω–µ–µ. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
        return
    
    now = int(time.time())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    if protocol == "outline":
        if country:
            cursor.execute("""
                SELECT k.id, k.expiry_at, t.price_rub
                FROM keys k
                JOIN tariffs t ON k.tariff_id = t.id
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ? AND s.country = ?
                ORDER BY k.expiry_at DESC LIMIT 1
            """, (user_id, now, country))
        else:
            cursor.execute("""
                SELECT k.id, k.expiry_at, t.price_rub
                FROM keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE k.user_id = ? AND k.expiry_at > ?
                ORDER BY k.expiry_at DESC LIMIT 1
            """, (user_id, now))
    else:  # v2ray
        if country:
            cursor.execute("""
                SELECT k.id, k.expiry_at, t.price_rub
                FROM v2ray_keys k
                JOIN tariffs t ON k.tariff_id = t.id
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ? AND s.country = ?
                ORDER BY k.expiry_at DESC LIMIT 1
            """, (user_id, now, country))
        else:
            cursor.execute("""
                SELECT k.id, k.expiry_at, t.price_rub
                FROM v2ray_keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE k.user_id = ? AND k.expiry_at > ?
                ORDER BY k.expiry_at DESC LIMIT 1
            """, (user_id, now))
    
    existing_key = cursor.fetchone()
    if existing_key:
        if existing_key[2] > 0:
            if country:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á {PROTOCOLS[protocol]['name']} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=main_menu)
            else:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á {PROTOCOLS[protocol]['name']}. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=main_menu)
            return
        else:
            if country:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á {PROTOCOLS[protocol]['name']} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
            else:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á {PROTOCOLS[protocol]['name']}. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.", reply_markup=main_menu)
            return
    else:
        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ email
        await create_new_key_flow_with_protocol(cursor, message, user_id, tariff, None, country, protocol)

async def handle_paid_tariff_with_protocol(cursor, message, user_id, tariff, country=None, protocol="outline"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    user_states[user_id] = {
        "state": "waiting_email",
        "tariff": tariff,
        "country": country,
        "protocol": protocol
    }
    
    await message.answer(
        f"üí≥ *–û–ø–ª–∞—Ç–∞ {PROTOCOLS[protocol]['icon']} {PROTOCOLS[protocol]['name']}*\n\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: *{tariff['name']}*\n"
        f"üí∞ –°—É–º–º–∞: *{tariff['price_rub']}‚ÇΩ*\n\n"
        "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:",
        reply_markup=cancel_keyboard,
        parse_mode="Markdown"
    )

async def create_payment_with_email_and_protocol(message, user_id, tariff, email=None, country=None, protocol="outline"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    logging.debug(f"create_payment_with_email_and_protocol: user_id={user_id}, email={email}, tariff={tariff}, country={country}, protocol={protocol}")
    
    # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    global PAYMENT_MODULE_AVAILABLE
    if PAYMENT_MODULE_AVAILABLE is None:
        try:
            payment_service = get_payment_service()
            PAYMENT_MODULE_AVAILABLE = payment_service is not None
            if PAYMENT_MODULE_AVAILABLE:
                logging.info("–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (lazy loading)")
            else:
                logging.warning("–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            PAYMENT_MODULE_AVAILABLE = False
            logging.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    try:
            security_logger = get_security_logger()
            if security_logger:
                ip_addr = None
                try:
                    ip_addr = str(message.from_user.id) if getattr(message, 'from_user', None) else None
                except Exception:
                    ip_addr = None
                security_logger.log_payment_attempt(
                    user_id=user_id,
                    amount=tariff.get('price_rub', 0) * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
                    protocol=protocol,
                    country=country,
                    email=email,
                    success=True,
                    ip_address=ip_addr,
                    user_agent="Telegram Bot"
                )
    except Exception as e:
        logging.error(f"Error logging payment attempt: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–æ–¥—É–ª—å
    if PAYMENT_MODULE_AVAILABLE:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º lazy loading –¥–ª—è legacy adapter
            from payments.adapters.legacy_adapter import create_payment_with_email_and_protocol_legacy
            result = await create_payment_with_email_and_protocol_legacy(message, user_id, tariff, email, country, protocol)
            
            if result and result != (None, None):
                # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–ª –ø–ª–∞—Ç–µ–∂
                payment_id, payment_url = result
                logging.debug(f"New payment module created payment: {payment_id}")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                try:
                    security_logger = get_security_logger()
                    if security_logger:
                        security_logger.log_payment_success(
                            user_id=user_id,
                            payment_id=payment_id,
                            amount=tariff.get('price_rub', 0) * 100,
                            protocol=protocol,
                            country=country,
                            ip_address=getattr(message, 'from_user', {}).get('id', None),
                            user_agent="Telegram Bot"
                        )
                except Exception as e:
                    logging.error(f"Error logging payment success: {e}")
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                with get_db_cursor() as cursor:
                    server = select_available_server_by_protocol(cursor, country, protocol)
                    if not server:
                        await message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[protocol]['name']} –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ.", reply_markup=main_menu)
                        return
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
                keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment"))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_email = email if email else f"user_{user_id}@veilbot.com"
                
                await message.answer(
                    f"üí≥ *–û–ø–ª–∞—Ç–∞ {PROTOCOLS[protocol]['icon']} {PROTOCOLS[protocol]['name']}*\n\n"
                    f"üì¶ –¢–∞—Ä–∏—Ñ: *{tariff['name']}*\n"
                    f"üí∞ –°—É–º–º–∞: *{tariff['price_rub']}‚ÇΩ*\n"
                    f"üìß Email: `{display_email}`\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
                asyncio.create_task(wait_for_payment_with_protocol(message, payment_id, server, user_id, tariff, country, protocol))
                return
            else:
                logging.debug("New payment module failed to create payment")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                try:
                    security_logger = get_security_logger()
                    if security_logger:
                        security_logger.log_payment_failure(
                            user_id=user_id,
                            amount=tariff.get('price_rub', 0) * 100,
                            protocol=protocol,
                            error="Payment creation failed",
                            country=country,
                            ip_address=getattr(message, 'from_user', {}).get('id', None),
                            user_agent="Telegram Bot"
                        )
                except Exception as log_e:
                    logging.error(f"Error logging payment failure: {log_e}")
                
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=main_menu)
                return
                
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–º –º–æ–¥—É–ª–µ: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–º –º–æ–¥—É–ª–µ
            try:
                security_logger = get_security_logger()
                if security_logger:
                    security_logger.log_payment_failure(
                        user_id=user_id,
                        amount=tariff.get('price_rub', 0) * 100,
                        protocol=protocol,
                        error=str(e),
                        country=country,
                        ip_address=getattr(message, 'from_user', {}).get('id', None),
                        user_agent="Telegram Bot"
                    )
            except Exception as log_e:
                logging.error(f"Error logging payment module error: {log_e}")
            
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=main_menu)
            return
    else:
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logging.warning("–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        await message.answer("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=main_menu)
        return

def select_available_server(cursor, country=None):
    now = int(time.time())
    if country:
        servers = cursor.execute("SELECT id, api_url, cert_sha256, max_keys FROM servers WHERE active = 1 AND country = ?", (country,)).fetchall()
    else:
        servers = cursor.execute("SELECT id, api_url, cert_sha256, max_keys FROM servers WHERE active = 1").fetchall()
    for s_id, api_url, cert_sha256, max_keys in servers:
        cursor.execute("SELECT COUNT(*) FROM keys WHERE server_id = ? AND expiry_at > ?", (s_id, now))
        active_keys = cursor.fetchone()[0]
        if active_keys < max_keys:
            return {"id": s_id, "api_url": api_url, "cert_sha256": cert_sha256}
    return None



async def wait_for_payment_with_protocol(message, payment_id, server, user_id, tariff, country=None, protocol="outline"):
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–æ–¥—É–ª—å
    if PAYMENT_MODULE_AVAILABLE:
        try:
            from payments.adapters.legacy_adapter import wait_for_payment_with_protocol_legacy
            success = await wait_for_payment_with_protocol_legacy(message, payment_id, protocol)
            
            if success:
                logging.debug(f"New payment module confirmed payment success: {payment_id}")
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                with get_db_cursor(commit=True) as cursor:
                    cursor.execute("UPDATE payments SET status = 'paid' WHERE payment_id = ?", (payment_id,))
                    cursor.execute("SELECT email FROM payments WHERE payment_id = ?", (payment_id,))
                    payment_data = cursor.fetchone()
                    email = payment_data[0] if payment_data else None
                    await create_new_key_flow_with_protocol(cursor, message, user_id, tariff, email, country, protocol)
                    # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ---
                    cursor.execute("SELECT referrer_id, bonus_issued FROM referrals WHERE referred_id = ?", (user_id,))
                    ref_row = cursor.fetchone()
                    if ref_row and ref_row[0] and not ref_row[1]:
                        referrer_id = ref_row[0]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
                        now = int(time.time())
                        cursor.execute("SELECT id, expiry_at FROM keys WHERE user_id = ? AND expiry_at > ? ORDER BY expiry_at DESC LIMIT 1", (referrer_id, now))
                        key = cursor.fetchone()
                        bonus_duration = 30 * 24 * 3600  # 1 –º–µ—Å—è—Ü
                        if key:
                            extend_existing_key(cursor, key, bonus_duration)
                            await bot.send_message(referrer_id, "üéâ –í–∞—à –∫–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ –º–µ—Å—è—Ü –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!")
                        else:
                            # –í—ã–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ –º–µ—Å—è—Ü
                            cursor.execute("SELECT * FROM tariffs WHERE duration_sec >= ? ORDER BY duration_sec ASC LIMIT 1", (bonus_duration,))
                            bonus_tariff = cursor.fetchone()
                            if bonus_tariff:
                                bonus_tariff_dict = {"id": bonus_tariff[0], "name": bonus_tariff[1], "price_rub": bonus_tariff[4], "duration_sec": bonus_tariff[2]}
                                await create_new_key_flow_with_protocol(cursor, message, referrer_id, bonus_tariff_dict, None, None, protocol)
                                await bot.send_message(referrer_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!")
                        cursor.execute("UPDATE referrals SET bonus_issued = 1 WHERE referred_id = ?", (user_id,))
                return
            else:
                logging.debug(f"New payment module timeout or failed: {payment_id}")
                await message.answer("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
                return
                
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–º –º–æ–¥—É–ª–µ: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=main_menu)
            return
    else:
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logging.warning("–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        await message.answer("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=main_menu)
        return

async def auto_delete_expired_keys():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π —Å grace period 24 —á–∞—Å–∞"""
    GRACE_PERIOD = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    while True:
        with get_db_cursor(commit=True) as cursor:
            now = int(time.time())
            grace_threshold = now - GRACE_PERIOD
            
            # Get expired Outline keys (–∏—Å—Ç–µ–∫—à–∏–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
            cursor.execute("""
                SELECT k.id, k.key_id, s.api_url, s.cert_sha256 
                FROM keys k 
                JOIN servers s ON k.server_id = s.id 
                WHERE k.expiry_at <= ?
            """, (grace_threshold,))
            expired_outline_keys = cursor.fetchall()
            
            # Delete Outline keys from server first, then from database
            outline_deleted = 0
            for key_id_db, key_id_outline, api_url, cert_sha256 in expired_outline_keys:
                if key_id_outline:
                    success = await asyncio.get_event_loop().run_in_executor(
                        None, delete_key, api_url, cert_sha256, key_id_outline
                    )
                    if not success:
                        logging.warning(f"Failed to delete Outline key {key_id_outline} from server")
            
            # Delete Outline keys from database
            cursor.execute("DELETE FROM keys WHERE expiry_at <= ?", (grace_threshold,))
            outline_deleted = cursor.rowcount
            
            # Get expired V2Ray keys (–∏—Å—Ç–µ–∫—à–∏–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
            cursor.execute("""
                SELECT k.id, k.v2ray_uuid, s.api_url, s.api_key 
                FROM v2ray_keys k 
                JOIN servers s ON k.server_id = s.id 
                WHERE k.expiry_at <= ?
            """, (grace_threshold,))
            expired_v2ray_keys = cursor.fetchall()
            
            # Delete V2Ray keys from server first, then from database
            v2ray_deleted = 0
            for key_id_db, v2ray_uuid, api_url, api_key in expired_v2ray_keys:
                if v2ray_uuid and api_url and api_key:
                    try:
                        from vpn_protocols import V2RayProtocol
                        protocol_client = V2RayProtocol(api_url, api_key)
                        await protocol_client.delete_user(v2ray_uuid)
                    except Exception as e:
                        logging.warning(f"Failed to delete V2Ray key {v2ray_uuid} from server: {e}")
            
            # Delete V2Ray keys from database
            cursor.execute("DELETE FROM v2ray_keys WHERE expiry_at <= ?", (grace_threshold,))
            v2ray_deleted = cursor.rowcount
            
            # Log results
            if outline_deleted > 0 or v2ray_deleted > 0:
                logging.info(f"Deleted expired keys (grace period 24h): {outline_deleted} Outline, {v2ray_deleted} V2Ray")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        try:
            optimize_memory()
            log_memory_usage()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        
        await asyncio.sleep(600)

async def notify_expiring_keys():
    while True:
        with get_db_cursor(commit=True) as cursor:
            now = int(time.time())
            cursor.execute("""
                SELECT k.id, k.user_id, k.access_url, k.expiry_at, 
                       k.created_at, k.notified
                FROM keys k 
                WHERE k.expiry_at > ?
            """, (now,))
            rows = cursor.fetchall()
            for row in rows:
                key_id_db, user_id, access_url, expiry, created_at, notified = row
                remaining_time = expiry - now
                original_duration = expiry - created_at
                ten_percent_threshold = int(original_duration * 0.1)
                one_day = 86400
                one_hour = 3600
                message = None
                new_notified = notified

                # 1 day notification
                if original_duration > one_day and remaining_time <= one_day and notified < 3:
                    time_str = format_duration(remaining_time)
                    message = f"‚è≥ –í–∞—à –∫–ª—é—á –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {time_str}:\n`{access_url}`\n–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø:"
                    new_notified = 3
                # 1 hour notification
                elif original_duration > one_hour and remaining_time <= one_hour and notified < 2:
                    time_str = format_duration(remaining_time)
                    message = f"‚è≥ –í–∞—à –∫–ª—é—á –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {time_str}:\n`{access_url}`\n–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø:"
                    new_notified = 2
                # 10 minutes notification (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π)
                elif remaining_time > 0 and remaining_time <= 600 and notified < 4:
                    time_str = format_duration(remaining_time)
                    message = f"‚è≥ –í–∞—à –∫–ª—é—á –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {time_str}:\n`{access_url}`\n–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø:"
                    new_notified = 4
                # 10% notification
                elif remaining_time > 0 and remaining_time <= ten_percent_threshold and notified < 1:
                    time_str = format_duration(remaining_time)
                    message = f"‚è≥ –í–∞—à –∫–ª—é—á –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {time_str}:\n`{access_url}`\n–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø:"
                    new_notified = 1

                if message:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="buy"))
                    await bot.send_message(user_id, message, reply_markup=keyboard, disable_web_page_preview=True, parse_mode="Markdown")
                    cursor.execute("UPDATE keys SET notified = ? WHERE id = ?", (new_notified, key_id_db))
        await asyncio.sleep(60)

async def check_key_availability():
    """Checks for the number of available keys and notifies the admin if it's low."""
    global low_key_notified
    while True:
        try:
            with get_db_cursor() as cursor:
                # Calculate total key capacity
                cursor.execute("SELECT SUM(max_keys) FROM servers WHERE active = 1")
                total_capacity = cursor.fetchone()[0] or 0

                # Count active keys
                now = int(time.time())
                cursor.execute("SELECT COUNT(*) FROM keys WHERE expiry_at > ?", (now,))
                active_keys = cursor.fetchone()[0] or 0

                free_keys = total_capacity - active_keys

                if free_keys < 6:
                    if not low_key_notified:
                        await bot.send_message(
                            ADMIN_ID,
                            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: *{free_keys}*."
                        )
                        low_key_notified = True
                else:
                    if low_key_notified:
                        await bot.send_message(
                            ADMIN_ID,
                            f"‚úÖ **–°—Ç–∞—Ç—É—Å:** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{free_keys}*."
                        )
                    low_key_notified = False
        except Exception as e:
            logging.error(f"Error in check_key_availability: {e}")

        await asyncio.sleep(300) # Check every 5 minutes

@dp.callback_query_handler(lambda c: c.data == "buy")
async def callback_buy_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏ —Å–∫—Ä—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    user_states[user_id] = {
        "state": "waiting_tariff",
        "paid_only": True
    }
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=get_tariff_menu(paid_only=True))
    try:
        await callback_query.answer()
    except Exception:
        pass

# --- Country selection helpers ---
def get_countries():
    with get_db_cursor() as cursor:
        cursor.execute("SELECT DISTINCT country FROM servers WHERE active = 1 AND country IS NOT NULL AND country != ''")
        countries = [row[0] for row in cursor.fetchall()]
    return countries

def get_countries_by_protocol(protocol):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    with get_db_cursor() as cursor:
        cursor.execute("""
            SELECT DISTINCT country 
            FROM servers 
            WHERE active = 1 
            AND country IS NOT NULL 
            AND country != '' 
            AND protocol = ?
        """, (protocol,))
        countries = [row[0] for row in cursor.fetchall()]
    return countries

def get_country_menu(countries):
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    for country in countries:
        menu.add(KeyboardButton(country))
    menu.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return menu

async def process_pending_paid_payments():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–æ–¥—É–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if PAYMENT_MODULE_AVAILABLE:
        try:
            from payments.adapters.legacy_adapter import process_pending_paid_payments_legacy
            return await process_pending_paid_payments_legacy()
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–º –º–æ–¥—É–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π: {e}")
    
    # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    while True:
        try:
            with get_db_cursor(commit=True) as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π (Outline –∏–ª–∏ V2Ray)
                # –ò –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã
                cursor.execute('''
                    SELECT p.id, p.user_id, p.tariff_id, p.email, p.protocol, p.country 
                    FROM payments p
                    WHERE p.status="paid" AND p.revoked = 0 
                    AND p.user_id NOT IN (
                        SELECT user_id FROM keys WHERE expiry_at > ?
                        UNION
                        SELECT user_id FROM v2ray_keys WHERE expiry_at > ?
                    )
                ''', (int(time.time()), int(time.time())))
                payments = cursor.fetchall()
                
                for payment_id, user_id, tariff_id, email, protocol, country in payments:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
                    cursor.execute('SELECT name, duration_sec, price_rub FROM tariffs WHERE id=?', (tariff_id,))
                    tariff_row = cursor.fetchone()
                    if not tariff_row:
                        logging.error(f"[AUTO-ISSUE] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ id={tariff_id} –¥–ª—è user_id={user_id}")
                        continue
                    tariff = {'id': tariff_id, 'name': tariff_row[0], 'duration_sec': tariff_row[1], 'price_rub': tariff_row[2]}
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º outline –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    if not protocol:
                        protocol = "outline"
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –º–µ—Å—Ç–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
                    server = select_available_server_by_protocol(cursor, country, protocol)
                    if not server:
                        logging.error(f"[AUTO-ISSUE] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {protocol} –¥–ª—è user_id={user_id}, —Ç–∞—Ä–∏—Ñ={tariff}, —Å—Ç—Ä–∞–Ω–∞={country}")
                        continue
                    
                    # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                    if protocol == "outline":
                        try:
                            key = await asyncio.get_event_loop().run_in_executor(None, create_key, server['api_url'], server['cert_sha256'])
                        except Exception as e:
                            logging.error(f"[AUTO-ISSUE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Outline –∫–ª—é—á–∞ –¥–ª—è user_id={user_id}: {e}")
                            continue
                        if not key:
                            logging.error(f"[AUTO-ISSUE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Outline –∫–ª—é—á –¥–ª—è user_id={user_id}, —Ç–∞—Ä–∏—Ñ={tariff}")
                            continue
                        
                        now = int(time.time())
                        expiry = now + tariff['duration_sec']
                        cursor.execute(
                            "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                            (server['id'], user_id, key["accessUrl"], expiry, key["id"], now, email, tariff_id)
                        )
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                        if tariff['price_rub'] == 0:
                            record_free_key_usage(cursor, user_id, protocol, country)
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await bot.send_message(user_id, format_key_message(key["accessUrl"]), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                        except Exception as e:
                            logging.error(f"[AUTO-ISSUE] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Outline –∫–ª—é—á user_id={user_id}: {e}")
                    
                    elif protocol == "v2ray":
                        try:
                            server_config = {'api_url': server['api_url'], 'api_key': server.get('api_key')}
                            protocol_client = ProtocolFactory.create_protocol(protocol, server_config)
                            
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
                            user_data = await protocol_client.create_user(email or f"user_{user_id}@veilbot.com")
                            
                            # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                            if not user_data or not user_data.get('uuid'):
                                raise Exception(f"Failed to create V2Ray user - invalid response from server")
                            
                            now = int(time.time())
                            expiry = now + tariff['duration_sec']
                            cursor.execute(
                                "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, email, created_at, expiry_at, tariff_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
                                (server['id'], user_id, user_data['uuid'], email or f"user_{user_id}@veilbot.com", now, expiry, tariff_id)
                            )
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                            if tariff['price_rub'] == 0:
                                record_free_key_usage(cursor, user_id, protocol, country)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            config = await protocol_client.get_user_config(user_data['uuid'], {
                                'domain': server.get('domain', 'veil-bot.ru'),
                                'port': 443,
                                'path': server.get('v2ray_path', '/v2ray')
                            })
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            try:
                                await bot.send_message(user_id, format_key_message_unified(config, protocol, tariff), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                            except Exception as e:
                                logging.error(f"[AUTO-ISSUE] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å V2Ray –∫–ª—é—á user_id={user_id}: {e}")
                                
                        except Exception as e:
                            logging.error(f"[AUTO-ISSUE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ V2Ray –∫–ª—é—á–∞ –¥–ª—è user_id={user_id}: {e}")
                            
                            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
                            try:
                                if 'user_data' in locals() and user_data and user_data.get('uuid'):
                                    await protocol_client.delete_user(user_data['uuid'])
                                    logging.info(f"[AUTO-ISSUE] Deleted V2Ray user {user_data['uuid']} from server due to error")
                            except Exception as cleanup_error:
                                logging.error(f"[AUTO-ISSUE] Failed to cleanup V2Ray user after error: {cleanup_error}")
                            
                            continue
                    
                    logging.info(f"[AUTO-ISSUE] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫–ª—é—á {protocol} –¥–ª—è user_id={user_id}, payment_id={payment_id}")
                    
        except Exception as e:
            logging.error(f"[AUTO-ISSUE] –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")
        await asyncio.sleep(300)

@dp.message_handler(lambda m: m.text == "–ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    help_text = (
        "–ï—Å–ª–∏ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "- –≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–µ—Ä, –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–ª—é—á–∞;\n"
        "- —Å–ª–æ–º–∞–ª–æ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–º–æ–∂–µ—Ç –µ–≥–æ —Å–º–µ–Ω–∞.\n\n"
        "–û–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:"
    )
    await message.answer(help_text, reply_markup=help_keyboard)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥" and m.reply_markup == help_keyboard)
async def handle_help_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "–°–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É")
async def handle_change_country(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã"""
    user_id = message.from_user.id
    logging.debug(f"handle_change_country called for user {user_id}")
    
    try:
        with get_db_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            now = int(time.time())
            
            # –ü–æ–ª—É—á–∞–µ–º Outline –∫–ª—é—á–∏
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol
                FROM keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ?
            """, (user_id, now))
            outline_keys = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º V2Ray –∫–ª—é—á–∏
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, s.domain, s.v2ray_path
                FROM v2ray_keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ?
            """, (user_id, now))
            v2ray_keys = cursor.fetchall()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
            all_keys = []
            for key in outline_keys:
                all_keys.append({
                    'id': key[0],
                    'expiry_at': key[1],
                    'server_id': key[2],
                    'key_id': key[3],
                    'access_url': key[4],
                    'country': key[5],
                    'tariff_id': key[6],
                    'email': key[7],
                    'protocol': key[8],
                    'type': 'outline'
                })
            
            for key in v2ray_keys:
                all_keys.append({
                    'id': key[0],
                    'expiry_at': key[1],
                    'server_id': key[2],
                    'v2ray_uuid': key[3],
                    'country': key[4],
                    'tariff_id': key[5],
                    'email': key[6],
                    'protocol': key[7],
                    'type': 'v2ray',
                    'domain': key[8],
                    'v2ray_path': key[9]
                })
            
            logging.debug(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {len(all_keys)}")
            
            if not all_keys:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã.", reply_markup=main_menu)
                return
            
            if len(all_keys) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã —Å—Ä–∞–∑—É
                logging.debug(f"–ú–µ–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: {all_keys[0]['type']}")
                await show_country_change_menu(message, user_id, all_keys[0])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                logging.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã")
                await show_key_selection_for_country_change(message, user_id, all_keys)
    
    except Exception as e:
        logging.error(f"Error in handle_change_country: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def handle_change_app(message: types.Message):
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = message.from_user.id
    now = int(time.time())
    
    try:
        with get_db_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol, 'outline' as key_type
                FROM keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ?
                ORDER BY k.expiry_at DESC
            """, (user_id, now))
            outline_keys = cursor.fetchall()
            logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(outline_keys)} Outline –∫–ª—é—á–µ–π")
            
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, 'v2ray' as key_type, s.domain, s.v2ray_path
                FROM v2ray_keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.user_id = ? AND k.expiry_at > ?
                ORDER BY k.expiry_at DESC
            """, (user_id, now))
            v2ray_keys = cursor.fetchall()
            logging.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(v2ray_keys)} V2Ray –∫–ª—é—á–µ–π")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
            all_keys = []
            for key in outline_keys:
                all_keys.append({
                    'id': key[0],
                    'expiry_at': key[1],
                    'server_id': key[2],
                    'key_id': key[3],
                    'access_url': key[4],
                    'country': key[5],
                    'tariff_id': key[6],
                    'email': key[7],
                    'protocol': key[8],
                    'type': 'outline'
                })
            
            for key in v2ray_keys:
                all_keys.append({
                    'id': key[0],
                    'expiry_at': key[1],
                    'server_id': key[2],
                    'v2ray_uuid': key[3],
                    'country': key[4],
                    'tariff_id': key[5],
                    'email': key[6],
                    'protocol': key[7],
                    'type': key[8],
                    'domain': key[9],
                    'v2ray_path': key[10]
                })
            
            logging.debug(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(all_keys)}")
            
            if not all_keys:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.", reply_markup=main_menu)
                return
            
            if len(all_keys) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á, –º–µ–Ω—è–µ–º –µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å—Ä–∞–∑—É
                logging.debug(f"–ú–µ–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞: {all_keys[0]['type']}")
                await change_protocol_for_key(message, user_id, all_keys[0])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                logging.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
                await show_protocol_change_menu(message, user_id, all_keys)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_change_app: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á")
async def handle_reissue_key(message: types.Message):
    user_id = message.from_user.id
    now = int(time.time())
    
    with get_db_cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol, 'outline' as key_type
            FROM keys k
            JOIN servers s ON k.server_id = s.id
            WHERE k.user_id = ? AND k.expiry_at > ?
            ORDER BY k.expiry_at DESC
        """, (user_id, now))
        outline_keys = cursor.fetchall()
        
        cursor.execute("""
            SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, 'v2ray' as key_type, s.domain, s.v2ray_path
            FROM v2ray_keys k
            JOIN servers s ON k.server_id = s.id
            WHERE k.user_id = ? AND k.expiry_at > ?
            ORDER BY k.expiry_at DESC
        """, (user_id, now))
        v2ray_keys = cursor.fetchall()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
        all_keys = []
        for key in outline_keys:
            all_keys.append({
                'id': key[0],
                'expiry_at': key[1],
                'server_id': key[2],
                'key_id': key[3],
                'access_url': key[4],
                'country': key[5],
                'tariff_id': key[6],
                'email': key[7],
                'protocol': key[8],
                'type': 'outline'
            })
        
        for key in v2ray_keys:
            all_keys.append({
                'id': key[0],
                'expiry_at': key[1],
                'server_id': key[2],
                'v2ray_uuid': key[3],
                'country': key[4],
                'tariff_id': key[5],
                'email': key[6],
                'protocol': key[7],
                'type': key[8],
                'domain': key[9],
                'v2ray_path': key[10]
            })
        
        if not all_keys:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞.", reply_markup=main_menu)
            return
        
        if len(all_keys) == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á, –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
            await reissue_specific_key(message, user_id, all_keys[0])
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            await show_key_selection_menu(message, user_id, all_keys)

async def show_key_selection_menu(message: types.Message, user_id: int, keys: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for i, key in enumerate(keys):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        with get_db_cursor() as cursor:
            cursor.execute("SELECT name FROM tariffs WHERE id = ?", (key['tariff_id'],))
            tariff_result = cursor.fetchone()
            tariff_name = tariff_result[0] if tariff_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiry_time = time.strftime('%d.%m.%Y %H:%M', time.localtime(key['expiry_at']))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        protocol_icon = PROTOCOLS[key['protocol']]['icon']
        button_text = f"{protocol_icon} {key['country']} - {tariff_name} (–¥–æ {expiry_time})"
        
        keyboard.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"reissue_key_{key['type']}_{key['id']}"
        ))
    
    keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_reissue"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞:",
        reply_markup=keyboard
    )

async def show_protocol_change_menu(message: types.Message, user_id: int, keys: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for i, key in enumerate(keys):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        with get_db_cursor() as cursor:
            cursor.execute("SELECT name FROM tariffs WHERE id = ?", (key['tariff_id'],))
            tariff_result = cursor.fetchone()
            tariff_name = tariff_result[0] if tariff_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiry_time = time.strftime('%d.%m.%Y %H:%M', time.localtime(key['expiry_at']))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        protocol_icon = PROTOCOLS[key['protocol']]['icon']
        button_text = f"{protocol_icon} {key['country']} - {tariff_name} (–¥–æ {expiry_time})"
        
        keyboard.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"change_protocol_{key['type']}_{key['id']}"
        ))
    
    keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_protocol_change"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:",
        reply_markup=keyboard
    )

async def delete_old_key_after_success(cursor, old_key_data: dict):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    try:
        if old_key_data['type'] == "outline":
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ Outline —Å–µ—Ä–≤–µ—Ä–∞
            cursor.execute("SELECT api_url, cert_sha256 FROM servers WHERE id = ?", (old_key_data['server_id'],))
            old_server_data = cursor.fetchone()
            if old_server_data and old_key_data.get('key_id'):
                old_api_url, old_cert_sha256 = old_server_data
                try:
                    await asyncio.get_event_loop().run_in_executor(None, delete_key, old_api_url, old_cert_sha256, old_key_data['key_id'])
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π Outline –∫–ª—é—á {old_key_data['key_id']} —Å —Å–µ—Ä–≤–µ—Ä–∞")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π Outline –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã
            cursor.execute("DELETE FROM keys WHERE id = ?", (old_key_data['db_id'],))
            logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π Outline –∫–ª—é—á {old_key_data['db_id']} –∏–∑ –±–∞–∑—ã")
            
        else:  # v2ray
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ V2Ray —Å–µ—Ä–≤–µ—Ä–∞
            cursor.execute("SELECT api_url, api_key FROM servers WHERE id = ?", (old_key_data['server_id'],))
            old_server_data = cursor.fetchone()
            if old_server_data and old_key_data.get('v2ray_uuid'):
                old_api_url, old_api_key = old_server_data
                server_config = {'api_url': old_api_url, 'api_key': old_api_key}
                protocol_client = ProtocolFactory.create_protocol('v2ray', server_config)
                try:
                    await protocol_client.delete_user(old_key_data['v2ray_uuid'])
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π V2Ray –∫–ª—é—á {old_key_data['v2ray_uuid']} —Å —Å–µ—Ä–≤–µ—Ä–∞")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π V2Ray –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã
            cursor.execute("DELETE FROM v2ray_keys WHERE id = ?", (old_key_data['db_id'],))
            logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π V2Ray –∫–ª—é—á {old_key_data['db_id']} –∏–∑ –±–∞–∑—ã")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞: {e}")

async def change_protocol_for_key(message: types.Message, user_id: int, key_data: dict):
    """–ú–µ–Ω—è–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    now = int(time.time())
    
    with get_db_cursor(commit=False) as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        cursor.execute("SELECT name, duration_sec, price_rub FROM tariffs WHERE id = ?", (key_data['tariff_id'],))
        tariff_row = cursor.fetchone()
        if not tariff_row:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
            return
        tariff = {'id': key_data['tariff_id'], 'name': tariff_row[0], 'duration_sec': tariff_row[1], 'price_rub': tariff_row[2]}
        
        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining = key_data['expiry_at'] - now
        if remaining <= 0:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫.", reply_markup=main_menu)
            return
        
        old_server_id = key_data['server_id']
        country = key_data['country']
        old_email = key_data['email']
        old_protocol = key_data['protocol']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ç–µ–∫—É—â–µ–º—É)
        new_protocol = "v2ray" if old_protocol == "outline" else "outline"
        
        # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
        cursor.execute("""
            SELECT id, api_url, cert_sha256, domain, v2ray_path, api_key FROM servers 
            WHERE active = 1 AND country = ? AND protocol = ?
        """, (country, new_protocol))
        servers = cursor.fetchall()
        
        if not servers:
            await message.answer(f"–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[new_protocol]['name']} –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.", reply_markup=main_menu)
            return
        
        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä
        new_server_id, api_url, cert_sha256, domain, v2ray_path, api_key = servers[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        old_key_data = {
            'type': key_data['type'],
            'server_id': old_server_id,
            'key_id': key_data.get('key_id'),
            'v2ray_uuid': key_data.get('v2ray_uuid'),
            'db_id': key_data['id']
        }
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
        if new_protocol == "outline":
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Outline –∫–ª—é—á
            try:
                key = await asyncio.get_event_loop().run_in_executor(None, create_key, api_url, cert_sha256)
                if not key:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ Outline –∫–ª—é—á–∞.", reply_markup=main_menu)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Outline –∫–ª—é—á–∞: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.", reply_markup=main_menu)
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
            cursor.execute(
                "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, key["accessUrl"], now + remaining, key["id"], now, old_email, key_data['tariff_id'])
            )
            
            await message.answer(format_key_message_unified(key["accessUrl"], new_protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            await delete_old_key_after_success(cursor, old_key_data)
            
        else:  # v2ray
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π V2Ray –∫–ª—é—á
            server_config = {'api_url': api_url, 'api_key': api_key}
            protocol_client = ProtocolFactory.create_protocol(new_protocol, server_config)
            try:
                user_data = await protocol_client.create_user(old_email or f"user_{user_id}@veilbot.com")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if not user_data or not user_data.get('uuid'):
                    raise Exception("Failed to create V2Ray user - API returned None or invalid data")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
                cursor.execute(
                    "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, email, created_at, expiry_at, tariff_id) "
                    "VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (new_server_id, user_id, user_data['uuid'], old_email or f"user_{user_id}@veilbot.com", now, now + remaining, key_data['tariff_id'])
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = await protocol_client.get_user_config(user_data['uuid'], {
                    'domain': domain,
                    'port': 443,
                    'path': v2ray_path or '/v2ray',
                    'email': old_email or f"user_{user_id}@veilbot.com"
                })
                
                await message.answer(format_key_message_unified(config, new_protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                await delete_old_key_after_success(cursor, old_key_data)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ V2Ray –∫–ª—é—á–∞: {e}")
                error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞."
                if "401" in str(e):
                    error_msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ V2Ray. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "404" in str(e):
                    error_msg = "–°–µ—Ä–≤–µ—Ä V2Ray –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await message.answer(error_msg, reply_markup=main_menu)
                return
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–º–µ–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        admin_msg = (
            f"üîÑ *–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–°—Ç–∞—Ä—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[old_protocol]['name']}*\n"
            f"–ù–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[new_protocol]['name']}*\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä: `{old_server_id}`\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: `{new_server_id}`\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(now + remaining))}</code>\n"
        )
        if old_email:
            admin_msg += f"Email: `{old_email}`\n"
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to send admin notification (protocol change): {e}")
        
        # –†—É—á–Ω–æ–π commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.connection.commit()

async def show_key_selection_for_country_change(message: types.Message, user_id: int, all_keys: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for key in all_keys:
        protocol_name = PROTOCOLS[key['protocol']]['name']
        country_name = key['country']
        expiry_date = time.strftime('%d.%m.%Y', time.localtime(key['expiry_at']))
        
        button_text = f"{PROTOCOLS[key['protocol']]['icon']} {protocol_name} ({country_name}) - –¥–æ {expiry_date}"
        callback_data = f"change_country_{key['type']}_{key['id']}"
        
        keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
    
    keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_country_change"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã:",
        reply_markup=keyboard
    )

async def show_country_change_menu(message: types.Message, user_id: int, key_data: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    protocol = key_data['protocol']
    current_country = key_data['country']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    available_countries = get_countries_by_protocol(protocol)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω—É
    available_countries = [country for country in available_countries if country != current_country]
    
    if not available_countries:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {PROTOCOLS[protocol]['name']} –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.",
            reply_markup=help_keyboard
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'country_change_selection',
        'key_data': key_data
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for country in available_countries:
        keyboard.add(KeyboardButton(f"üåç {country}"))
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    
    await message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞: {current_country}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {PROTOCOLS[protocol]['name']}:",
        reply_markup=keyboard
    )

async def change_country_for_key(message: types.Message, user_id: int, key_data: dict, new_country: str):
    """–ú–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    now = int(time.time())
    
    with get_db_cursor(commit=False) as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        cursor.execute("SELECT name, duration_sec, price_rub FROM tariffs WHERE id = ?", (key_data['tariff_id'],))
        tariff_row = cursor.fetchone()
        if not tariff_row:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
            return
        tariff = {'id': key_data['tariff_id'], 'name': tariff_row[0], 'duration_sec': tariff_row[1], 'price_rub': tariff_row[2]}
        
        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining = key_data['expiry_at'] - now
        if remaining <= 0:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫.", reply_markup=main_menu)
            return
        
        old_server_id = key_data['server_id']
        old_country = key_data['country']
        old_email = key_data['email']
        protocol = key_data['protocol']
        
        # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω—ã —Å —Ç–µ–º –∂–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
        cursor.execute("""
            SELECT id, api_url, cert_sha256, domain, v2ray_path, api_key FROM servers 
            WHERE active = 1 AND country = ? AND protocol = ?
        """, (new_country, protocol))
        servers = cursor.fetchall()
        
        if not servers:
            await message.answer(f"–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[protocol]['name']} –≤ —Å—Ç—Ä–∞–Ω–µ {new_country}.", reply_markup=main_menu)
            return
        
        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä
        new_server_id, api_url, cert_sha256, domain, v2ray_path, api_key = servers[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        old_key_data = {
            'type': key_data['type'],
            'server_id': old_server_id,
            'key_id': key_data.get('key_id'),
            'v2ray_uuid': key_data.get('v2ray_uuid'),
            'db_id': key_data['id']
        }
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–µ
        if protocol == "outline":
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Outline –∫–ª—é—á
            try:
                key = await asyncio.get_event_loop().run_in_executor(None, create_key, api_url, cert_sha256)
                if not key:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ Outline –∫–ª—é—á–∞.", reply_markup=main_menu)
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Outline –∫–ª—é—á–∞: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.", reply_markup=main_menu)
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
            cursor.execute(
                "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, key["accessUrl"], now + remaining, key["id"], now, old_email, key_data['tariff_id'])
            )
            
            await message.answer(format_key_message_unified(key["accessUrl"], protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            await delete_old_key_after_success(cursor, old_key_data)
            
        elif protocol == "v2ray":
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π V2Ray –∫–ª—é—á
            try:
                from vpn_protocols import V2RayProtocol
                v2ray_client = V2RayProtocol(api_url, api_key)
                user_data = await v2ray_client.create_user(old_email or f"user_{user_id}@veilbot.com")
                
                if not user_data or not user_data.get('uuid'):
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ V2Ray –∫–ª—é—á–∞.", reply_markup=main_menu)
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
                cursor.execute(
                    "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, expiry_at, created_at, email, tariff_id) "
                    "VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (new_server_id, user_id, user_data['uuid'], now + remaining, now, old_email, key_data['tariff_id'])
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º access_url –¥–ª—è V2Ray
                access_url = f"vless://{user_data['uuid']}@{domain}:443?path={v2ray_path}&security=tls&type=ws#VeilBot-V2Ray"
                
                await message.answer(format_key_message_unified(access_url, protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                await delete_old_key_after_success(cursor, old_key_data)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ V2Ray –∫–ª—é—á–∞: {e}")
                error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞."
                if "401" in str(e):
                    error_msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ V2Ray. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "404" in str(e):
                    error_msg = "–°–µ—Ä–≤–µ—Ä V2Ray –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await message.answer(error_msg, reply_markup=main_menu)
                return
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω—ã
        admin_msg = (
            f"üåç *–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[protocol]['name']}*\n"
            f"–°—Ç–∞—Ä–∞—è —Å—Ç—Ä–∞–Ω–∞: *{old_country}*\n"
            f"–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: *{new_country}*\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä: `{old_server_id}`\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: `{new_server_id}`\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(now + remaining))}</code>\n"
        )
        if old_email:
            admin_msg += f"Email: `{old_email}`\n"
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to send admin notification (country change): {e}")
        
        # –†—É—á–Ω–æ–π commit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.connection.commit()

async def reissue_specific_key(message: types.Message, user_id: int, key_data: dict):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    now = int(time.time())
    
    with get_db_cursor(commit=True) as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        cursor.execute("SELECT name, duration_sec, price_rub FROM tariffs WHERE id = ?", (key_data['tariff_id'],))
        tariff_row = cursor.fetchone()
        if not tariff_row:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
            return
        tariff = {'id': key_data['tariff_id'], 'name': tariff_row[0], 'duration_sec': tariff_row[1], 'price_rub': tariff_row[2]}
        
        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining = key_data['expiry_at'] - now
        if remaining <= 0:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫.", reply_markup=main_menu)
            return
        
        old_server_id = key_data['server_id']
        country = key_data['country']
        old_email = key_data['email']
        protocol = key_data['protocol']
        
        # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä—ã —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        cursor.execute("""
            SELECT id, api_url, cert_sha256, domain, v2ray_path, api_key, max_keys FROM servers 
            WHERE active = 1 AND country = ? AND protocol = ? AND id != ?
        """, (country, protocol, old_server_id))
        other_servers = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        available_servers = []
        for server in other_servers:
            server_id, api_url, cert_sha256, domain, v2ray_path, api_key, max_keys = server
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–º–∫–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            if protocol == 'outline':
                cursor.execute("SELECT COUNT(*) FROM keys WHERE server_id = ? AND expiry_at > ?", (server_id, now))
            elif protocol == 'v2ray':
                cursor.execute("SELECT COUNT(*) FROM v2ray_keys WHERE server_id = ? AND expiry_at > ?", (server_id, now))
            
            current_keys = cursor.fetchone()[0]
            if current_keys < max_keys:
                available_servers.append(server)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞
        if available_servers:
            # –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π
            new_server_id, api_url, cert_sha256, domain, v2ray_path, api_key, max_keys = available_servers[0]
            logging.info(f"–ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä {new_server_id} –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞ –∫–ª—é—á–∞")
        else:
            # –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ
            cursor.execute("SELECT max_keys FROM servers WHERE id = ?", (old_server_id,))
            max_keys_row = cursor.fetchone()
            max_keys = max_keys_row[0] if max_keys_row else 100
            
            if protocol == 'outline':
                cursor.execute("SELECT COUNT(*) FROM keys WHERE server_id = ? AND expiry_at > ?", (old_server_id, now))
            elif protocol == 'v2ray':
                cursor.execute("SELECT COUNT(*) FROM v2ray_keys WHERE server_id = ? AND expiry_at > ?", (old_server_id, now))
            
            current_keys = cursor.fetchone()[0]
            
            if current_keys < max_keys:
                new_server_id = old_server_id
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                cursor.execute("SELECT api_url, cert_sha256, domain, v2ray_path, api_key FROM servers WHERE id = ?", (old_server_id,))
                server_data = cursor.fetchone()
                api_url, cert_sha256, domain, v2ray_path, api_key = server_data
                logging.info(f"–î—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞–µ–º –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ {old_server_id}")
            else:
                await message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ {PROTOCOLS[protocol]['name']} –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞ –∫–ª—é—á–∞.", reply_markup=main_menu)
                return
        
        if key_data['type'] == "outline":
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Outline –∫–ª—é—á
            key = await asyncio.get_event_loop().run_in_executor(None, create_key, api_url, cert_sha256)
            if not key:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.", reply_markup=main_menu)
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ Outline —Å–µ—Ä–≤–µ—Ä–∞
            cursor.execute("SELECT api_url, cert_sha256 FROM servers WHERE id = ?", (old_server_id,))
            old_server_data = cursor.fetchone()
            if old_server_data:
                old_api_url, old_cert_sha256 = old_server_data
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Outline –∫–ª—é—á –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å key_id
                    logging.debug(f"key_data type: {key_data.get('type')}, key_id present: {'key_id' in key_data}")
                    if key_data['type'] == "outline" and 'key_id' in key_data:
                        logging.debug(f"–£–¥–∞–ª—è–µ–º Outline –∫–ª—é—á —Å ID: {key_data['key_id']} —Å —Å–µ—Ä–≤–µ—Ä–∞ {old_server_id}")
                        await asyncio.get_event_loop().run_in_executor(None, delete_key, old_api_url, old_cert_sha256, key_data['key_id'])
                    else:
                        logging.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ Outline –∫–ª—é—á–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç key_id")
                        logging.debug(f"key_data keys: {list(key_data.keys())}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π Outline –∫–ª—é—á: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã
            cursor.execute("DELETE FROM keys WHERE id = ?", (key_data['id'],))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
            cursor.execute(
                "INSERT INTO keys (server_id, user_id, access_url, expiry_at, key_id, created_at, email, tariff_id) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (new_server_id, user_id, key["accessUrl"], now + remaining, key["id"], now, old_email, key_data['tariff_id'])
            )
            
            await message.answer(format_key_message_unified(key["accessUrl"], protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
            
        elif key_data['type'] == "v2ray":  # v2ray
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π V2Ray –∫–ª—é—á
            server_config = {'api_url': api_url, 'api_key': api_key}
            protocol_client = ProtocolFactory.create_protocol(protocol, server_config)
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ (–í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ)
                user_data = await protocol_client.create_user(old_email or f"user_{user_id}@veilbot.com")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if not user_data or not user_data.get('uuid'):
                    raise Exception(f"Failed to create V2Ray user - invalid response from server")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ V2Ray —Å–µ—Ä–≤–µ—Ä–∞
                old_uuid = key_data['v2ray_uuid']
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞
                    cursor.execute("SELECT api_url, api_key FROM servers WHERE id = ?", (old_server_id,))
                    old_server_data = cursor.fetchone()
                    if old_server_data:
                        old_api_url, old_api_key = old_server_data
                        old_server_config = {'api_url': old_api_url, 'api_key': old_api_key}
                        old_protocol_client = ProtocolFactory.create_protocol(protocol, old_server_config)
                        await old_protocol_client.delete_user(old_uuid)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π V2Ray –∫–ª—é—á (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω): {e}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã
                cursor.execute("DELETE FROM v2ray_keys WHERE id = ?", (key_data['id'],))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ email
                cursor.execute(
                    "INSERT INTO v2ray_keys (server_id, user_id, v2ray_uuid, email, created_at, expiry_at, tariff_id) "
                    "VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (new_server_id, user_id, user_data['uuid'], old_email or f"user_{user_id}@veilbot.com", now, now + remaining, key_data['tariff_id'])
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = await protocol_client.get_user_config(user_data['uuid'], {
                    'domain': domain,
                    'port': 443,
                    'path': v2ray_path or '/v2ray',
                    'email': old_email or f"user_{user_id}@veilbot.com"
                })
                
                await message.answer(format_key_message_unified(config, protocol, tariff, remaining), reply_markup=main_menu, disable_web_page_preview=True, parse_mode="Markdown")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ V2Ray –∫–ª—é—á–∞: {e}")
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
                try:
                    if 'user_data' in locals() and user_data and user_data.get('uuid'):
                        await protocol_client.delete_user(user_data['uuid'])
                        logging.info(f"Deleted V2Ray user {user_data['uuid']} from server due to error")
                except Exception as cleanup_error:
                    logging.error(f"Failed to cleanup V2Ray user after error: {cleanup_error}")
                
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ V2Ray –∫–ª—é—á–∞.", reply_markup=main_menu)
                return
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ
        server_change_msg = "–Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ" if new_server_id != old_server_id else "–Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ"
        admin_msg = (
            f"üîÑ *–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–ª—é—á–∞*\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: *{PROTOCOLS[protocol]['name']}*\n"
            f"–¢–∞—Ä–∏—Ñ: *{tariff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
            f"–°–µ—Ä–≤–µ—Ä: `{new_server_id}` ({server_change_msg})\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <code>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(now + remaining))}</code>\n"
        )
        if old_email:
            admin_msg += f"Email: `{old_email}`\n"
        try:
            await bot.send_message(ADMIN_ID, admin_msg, disable_web_page_preview=True, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to send admin notification (reissue): {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("reissue_key_"))
async def handle_reissue_key_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞"""
    user_id = callback_query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data: reissue_key_{type}_{id}
    parts = callback_query.data.split("_")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    key_type = parts[2]
    key_id = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    with get_db_cursor() as cursor:
        if key_type == "outline":
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol
                FROM keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        else:  # v2ray
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, s.domain, s.v2ray_path
                FROM v2ray_keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        
        key_data = cursor.fetchone()
        if not key_data:
            await callback_query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞
        if key_type == "outline":
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'key_id': key_data[3],
                'access_url': key_data[4],
                'country': key_data[5],
                'tariff_id': key_data[6],
                'email': key_data[7],
                'protocol': key_data[8],
                'type': 'outline'
            }
        else:
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'v2ray_uuid': key_data[3],
                'country': key_data[4],
                'tariff_id': key_data[5],
                'email': key_data[6],
                'protocol': key_data[7],
                'domain': key_data[8],
                'v2ray_path': key_data[9],
                'type': 'v2ray'
            }
    
    # –ü–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞–µ–º –∫–ª—é—á
    logging.debug(f"–ü–µ—Ä–µ–¥–∞–µ–º key_dict –≤ reissue_specific_key: {list(key_dict.keys())}")
    await reissue_specific_key(callback_query.message, user_id, key_dict)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "cancel_reissue")
async def handle_cancel_reissue(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–∞ –∫–ª—é—á–∞"""
    await callback_query.message.edit_text("–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("change_country_"))
async def handle_change_country_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã"""
    user_id = callback_query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data: change_country_{type}_{id}
    parts = callback_query.data.split("_")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    key_type = parts[2]
    key_id = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    with get_db_cursor() as cursor:
        if key_type == "outline":
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol
                FROM keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        else:  # v2ray
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, s.domain, s.v2ray_path
                FROM v2ray_keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        
        key_data = cursor.fetchone()
        if not key_data:
            await callback_query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞
        if key_type == "outline":
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'key_id': key_data[3],
                'access_url': key_data[4],
                'country': key_data[5],
                'tariff_id': key_data[6],
                'email': key_data[7],
                'protocol': key_data[8],
                'type': 'outline'
            }
        else:  # v2ray
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'v2ray_uuid': key_data[3],
                'country': key_data[4],
                'tariff_id': key_data[5],
                'email': key_data[6],
                'protocol': key_data[7],
                'type': 'v2ray',
                'domain': key_data[8],
                'v2ray_path': key_data[9]
            }
    
    await callback_query.answer()
    await show_country_change_menu(callback_query.message, user_id, key_dict)

@dp.callback_query_handler(lambda c: c.data == "cancel_country_change")
async def handle_cancel_country_change(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã"""
    await callback_query.answer()
    await callback_query.message.answer("–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data.startswith("change_protocol_"))
async def handle_change_protocol_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    user_id = callback_query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data: change_protocol_{type}_{id}
    parts = callback_query.data.split("_")
    if len(parts) != 4:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    key_type = parts[2]
    key_id = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
    with get_db_cursor() as cursor:
        if key_type == "outline":
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.key_id, k.access_url, s.country, k.tariff_id, k.email, s.protocol
                FROM keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        else:  # v2ray
            cursor.execute("""
                SELECT k.id, k.expiry_at, k.server_id, k.v2ray_uuid, s.country, k.tariff_id, k.email, s.protocol, s.domain, s.v2ray_path
                FROM v2ray_keys k
                JOIN servers s ON k.server_id = s.id
                WHERE k.id = ? AND k.user_id = ?
            """, (key_id, user_id))
        
        key_data = cursor.fetchone()
        if not key_data:
            await callback_query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞
        if key_type == "outline":
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'key_id': key_data[3],
                'access_url': key_data[4],
                'country': key_data[5],
                'tariff_id': key_data[6],
                'email': key_data[7],
                'protocol': key_data[8],
                'type': 'outline'
            }
        else:
            key_dict = {
                'id': key_data[0],
                'expiry_at': key_data[1],
                'server_id': key_data[2],
                'v2ray_uuid': key_data[3],
                'country': key_data[4],
                'tariff_id': key_data[5],
                'email': key_data[6],
                'protocol': key_data[7],
                'domain': key_data[8],
                'v2ray_path': key_data[9],
                'type': 'v2ray'
            }
    
    # –ú–µ–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–ª—é—á–∞
    await change_protocol_for_key(callback_query.message, user_id, key_dict)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "cancel_protocol_change")
async def handle_cancel_protocol_change(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    await callback_query.message.edit_text("–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.answer()

async def broadcast_message(message_text: str, admin_id: int = None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    
    Args:
        message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        admin_id (int): ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    success_count = 0
    failed_count = 0
    total_users = 0
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT DISTINCT user_id FROM keys 
                UNION 
                SELECT DISTINCT user_id FROM v2ray_keys 
                ORDER BY user_id
            """)
            user_ids = [row[0] for row in cursor.fetchall()]
            total_users = len(user_ids)
        
        if total_users == 0:
            if admin_id:
                await bot.send_message(admin_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message_text, parse_mode='Markdown')
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await asyncio.sleep(0.05)
            except Exception as e:
                failed_count += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if admin_id:
            report = (
                f"üìä *–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ*\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_users*100):.1f}%"
            )
            await bot.send_message(admin_id, report, parse_mode='Markdown')
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}"
        logging.error(error_msg)
        if admin_id:
            await bot.send_message(admin_id, error_msg)

@dp.message_handler(commands=["broadcast"])
async def handle_broadcast_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /broadcast)
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/broadcast üîî –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã."
        )
        return
    
    broadcast_text = command_parts[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    text_hash = hash(broadcast_text)
    broadcast_texts[text_hash] = broadcast_text
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_broadcast:{text_hash}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
    )
    
    await message.answer(
        f"üì¢ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
        f"{broadcast_text}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!",
        reply_markup=confirm_keyboard,
        parse_mode='Markdown'
    )

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_texts = {}

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_broadcast:"))
async def handle_confirm_broadcast(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback_data
    message_hash = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    original_text = broadcast_texts.get(message_hash)
    if not original_text:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback_query.message.edit_text(
        "üì§ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...*\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        parse_mode='Markdown'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await broadcast_message(original_text, ADMIN_ID)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    del broadcast_texts[message_hash]

@dp.callback_query_handler(lambda c: c.data == "cancel_broadcast")
async def handle_cancel_broadcast(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await callback_query.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback_query.answer()

if __name__ == "__main__":
    import sys
    import traceback
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–æ–≤
    setup_logging(level="INFO")
    try:
        from logging.handlers import RotatingFileHandler
        file_handler = RotatingFileHandler('bot.log', maxBytes=5 * 1024 * 1024, backupCount=3, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logging.getLogger().addHandler(file_handler)
    except Exception:
        pass
    
    logger = logging.getLogger(__name__)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ event loop
        loop = asyncio.get_event_loop()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        background_tasks = [
            process_pending_paid_payments(),
            auto_delete_expired_keys(),
            notify_expiring_keys(),
            check_key_availability()
        ]
        
        for task in background_tasks:
            try:
                loop.create_task(task)
                logger.info(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task.__name__} –∑–∞–ø—É—â–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ {task.__name__}: {e}")
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logging.info("üöÄ VeilBot –∑–∞–ø—É—â–µ–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏")
        logging.info("Updates were skipped successfully.")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        executor.start_polling(dp, skip_updates=True, loop=loop)
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ bot.log")
        sys.exit(1)
