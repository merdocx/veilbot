#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ VeilBot
"""

import time
import sys
import gc
import psutil
import os
from memory_optimizer import memory_optimizer, optimize_memory, get_memory_stats

def test_memory_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    initial_stats = get_memory_stats()
    initial_memory = psutil.Process().memory_info()
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory.rss / 1024 / 1024:.2f} MB")
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {initial_stats}")
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...")
    start_time = time.time()
    
    objects_created = 0
    for i in range(1000):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ lazy loading
        result = memory_optimizer.lazy_load(
            f"test_object_{i}", 
            lambda x=i: {
                "id": x,
                "data": "x" * 1000,  # 1KB –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—ä–µ–∫—Ç
                "timestamp": time.time()
            }
        )
        if result:
            objects_created += 1
    
    creation_time = time.time() - start_time
    mid_stats = get_memory_stats()
    mid_memory = psutil.Process().memory_info()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {objects_created}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mid_memory.rss / 1024 / 1024:.2f} MB")
    print(f"üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {mid_stats}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    cache_start_time = time.time()
    
    cache_hits = 0
    for i in range(1000):
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ –∂–µ –æ–±—ä–µ–∫—Ç—ã
        result = memory_optimizer.lazy_load(
            f"test_object_{i}", 
            lambda x=i: {"id": x, "data": "new_data"}
        )
        if result and result.get("data") != "new_data":  # –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            cache_hits += 1
    
    cache_time = time.time() - cache_start_time
    print(f"‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {cache_hits}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {cache_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
    optimize_start_time = time.time()
    
    collected = optimize_memory()
    
    optimize_time = time.time() - optimize_start_time
    final_stats = get_memory_stats()
    final_memory = psutil.Process().memory_info()
    
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {collected}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimize_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {final_memory.rss / 1024 / 1024:.2f} MB")
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    memory_change = final_memory.rss - initial_memory.rss
    memory_change_mb = memory_change / 1024 / 1024
    
    print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_change_mb:+.2f} MB")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: {objects_created / creation_time:.0f} –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {cache_hits / cache_time:.0f} –ø–æ–ø–∞–¥–∞–Ω–∏–π/—Å–µ–∫")
    print(f"üßπ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞: {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    cache_efficiency = cache_hits / 1000 * 100 if cache_hits > 0 else 0
    print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_efficiency:.1f}%")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\nüèÜ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    if cache_efficiency > 95:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    elif cache_efficiency > 80:
        print("‚úÖ –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if memory_change_mb < 10:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")
    elif memory_change_mb < 50:
        print("‚úÖ –•–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")
    else:
        print("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    
    if creation_time < 1.0:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
    elif creation_time < 5.0:
        print("‚úÖ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
    
    return {
        "objects_created": objects_created,
        "cache_hits": cache_hits,
        "cache_efficiency": cache_efficiency,
        "memory_change_mb": memory_change_mb,
        "creation_time": creation_time,
        "cache_time": cache_time,
        "optimize_time": optimize_time,
        "objects_collected": collected
    }

def test_memory_pressure():
    """–¢–µ—Å—Ç –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–∞–º—è—Ç—å
    large_objects = []
    for i in range(100):
        large_obj = {
            "id": i,
            "data": "x" * 10000,  # 10KB –Ω–∞ –æ–±—ä–µ–∫—Ç
            "nested": {"deep": {"data": "y" * 5000}}
        }
        large_objects.append(large_obj)
    
    # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    pressure_memory = psutil.Process().memory_info()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π: {pressure_memory.rss / 1024 / 1024:.2f} MB")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    collected = optimize_memory()
    after_optimize_memory = psutil.Process().memory_info()
    
    print(f"üßπ –°–æ–±—Ä–∞–Ω–æ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π: {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {after_optimize_memory.rss / 1024 / 1024:.2f} MB")
    
    # –û—á–∏—â–∞–µ–º
    del large_objects
    gc.collect()
    
    return collected

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ VeilBot")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        results = test_memory_performance()
        
        # –¢–µ—Å—Ç –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        pressure_results = test_memory_pressure()
        
        print("\n" + "=" * 60)
        print("üéâ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results['objects_created']}")
        print(f"   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {results['cache_efficiency']:.1f}%")
        print(f"   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {results['memory_change_mb']:+.2f} MB")
        print(f"   ‚Ä¢ –°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results['objects_collected'] + pressure_results}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)
