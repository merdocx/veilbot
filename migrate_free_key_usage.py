#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–∞—Ö
–≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É free_key_usage
"""

import sqlite3
import time
from db import migrate_add_free_key_usage

def migrate_existing_free_keys():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É free_key_usage"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    migrate_add_free_key_usage()
    
    conn = sqlite3.connect("vpn.db")
    cursor = conn.cursor()
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–∞—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã keys (Outline)
        cursor.execute("""
            SELECT DISTINCT k.user_id, s.country, k.created_at
            FROM keys k
            JOIN tariffs t ON k.tariff_id = t.id
            LEFT JOIN servers s ON k.server_id = s.id
            WHERE t.price_rub = 0
            ORDER BY k.user_id, k.created_at
        """)
        outline_free_keys = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã v2ray_keys
        cursor.execute("""
            SELECT DISTINCT k.user_id, s.country, k.created_at
            FROM v2ray_keys k
            JOIN tariffs t ON k.tariff_id = t.id
            LEFT JOIN servers s ON k.server_id = s.id
            WHERE t.price_rub = 0
            ORDER BY k.user_id, k.created_at
        """)
        v2ray_free_keys = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(outline_free_keys)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö Outline –∫–ª—é—á–µ–π")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(v2ray_free_keys)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö V2Ray –∫–ª—é—á–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è Outline –∫–ª—é—á–µ–π
        outline_count = 0
        for user_id, country, created_at in outline_free_keys:
            try:
                cursor.execute("""
                    INSERT OR IGNORE INTO free_key_usage (user_id, protocol, country, created_at)
                    VALUES (?, ?, ?, ?)
                """, (user_id, "outline", country, created_at))
                if cursor.rowcount > 0:
                    outline_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Outline –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id={user_id}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è V2Ray –∫–ª—é—á–µ–π
        v2ray_count = 0
        for user_id, country, created_at in v2ray_free_keys:
            try:
                cursor.execute("""
                    INSERT OR IGNORE INTO free_key_usage (user_id, protocol, country, created_at)
                    VALUES (?, ?, ?, ?)
                """, (user_id, "v2ray", country, created_at))
                if cursor.rowcount > 0:
                    v2ray_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ V2Ray –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id={user_id}: {e}")
        
        conn.commit()
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ {outline_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è Outline –∫–ª—é—á–µ–π")
        print(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ {v2ray_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è V2Ray –∫–ª—é—á–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM free_key_usage")
        total_records = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ free_key_usage: {total_records}")
        
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM free_key_usage")
        unique_users = cursor.fetchone()[0]
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    conn = sqlite3.connect("vpn.db")
    cursor = conn.cursor()
    
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("""
            SELECT COUNT(DISTINCT k.user_id) as users_with_free_keys
            FROM (
                SELECT user_id FROM keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE t.price_rub = 0
                UNION
                SELECT user_id FROM v2ray_keys k
                JOIN tariffs t ON k.tariff_id = t.id
                WHERE t.price_rub = 0
            ) k
        """)
        users_with_free_keys = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM free_key_usage")
        users_in_new_table = cursor.fetchone()[0]
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏: {users_with_free_keys}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {users_in_new_table}")
        
        if users_with_free_keys == users_in_new_table:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–∞—Ö")
    print("=" * 50)
    
    migrate_existing_free_keys()
    verify_migration()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

