#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
"""

import sqlite3
import time
from bot import check_free_tariff_limit_by_protocol_and_country, record_free_key_usage

def test_free_key_limit():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    
    conn = sqlite3.connect("vpn.db")
    cursor = conn.cursor()
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user_id = 999999
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á
        can_get_free = check_free_tariff_limit_by_protocol_and_country(cursor, test_user_id, "outline")
        print(f"üîç –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Outline –∫–ª—é—á: {not can_get_free}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        print("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
        record_free_key_usage(cursor, test_user_id, "outline", "Russia")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        can_get_free = check_free_tariff_limit_by_protocol_and_country(cursor, test_user_id, "outline")
        print(f"üîç –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Outline –∫–ª—é—á –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: {not can_get_free}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø–æ–ª—É—á–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
        can_get_free_other_country = check_free_tariff_limit_by_protocol_and_country(cursor, test_user_id, "outline", "Germany")
        print(f"üîç –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Outline –∫–ª—é—á –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏: {not can_get_free_other_country}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        can_get_free_v2ray = check_free_tariff_limit_by_protocol_and_country(cursor, test_user_id, "v2ray")
        print(f"üîç –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π V2Ray –∫–ª—é—á: {not can_get_free_v2ray}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ V2Ray –∫–ª—é—á–∞
        print("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ V2Ray –∫–ª—é—á–∞...")
        record_free_key_usage(cursor, test_user_id, "v2ray", "Russia")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        can_get_free_v2ray = check_free_tariff_limit_by_protocol_and_country(cursor, test_user_id, "v2ray")
        print(f"üîç –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π V2Ray –∫–ª—é—á –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: {not can_get_free_v2ray}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã free_key_usage:")
        cursor.execute("SELECT user_id, protocol, country, created_at FROM free_key_usage WHERE user_id = ?", (test_user_id,))
        records = cursor.fetchall()
        for record in records:
            print(f"  - User: {record[0]}, Protocol: {record[1]}, Country: {record[2]}, Created: {record[3]}")
        
        conn.commit()
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

def test_existing_users():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    conn = sqlite3.connect("vpn.db")
    cursor = conn.cursor()
    
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT DISTINCT user_id FROM free_key_usage LIMIT 3")
        existing_users = cursor.fetchall()
        
        for user_id, in existing_users:
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è Outline
            can_get_outline = check_free_tariff_limit_by_protocol_and_country(cursor, user_id, "outline")
            print(f"  - –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Outline –∫–ª—é—á: {not can_get_outline}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è V2Ray
            can_get_v2ray = check_free_tariff_limit_by_protocol_and_country(cursor, user_id, "v2ray")
            print(f"  - –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π V2Ray –∫–ª—é—á: {not can_get_v2ray}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    test_free_key_limit()
    test_existing_users()
